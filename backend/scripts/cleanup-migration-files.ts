import fs from 'fs';
import path from 'path';

async function cleanupMigrationFiles() {
  try {
    console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π...\n');

    const projectDir = process.cwd();
    const tempFiles = [
      'fix_chase_aggregators.sql',
      'apply_chase_fix.ts',
      'check-quattrex-aggregator.ts',
      'update-quattrex-timeout.ts',
      'test-quattrex-timeout.ts',
      'monitor-aggregator-logs.ts',
      'update-quattrex-fast-timeout.ts',
      'update-all-aggregators-timeout.ts',
      'test-fast-timeout.ts',
      'test-fast-timeout-ssl.ts',
      'test-chase-compatible-endpoint.ts',
      'test-correct-endpoint.ts',
      'check-integration-logs.ts',
      'test-admin-endpoint.ts',
      'test-headers.ts',
      'test-fixed-format.ts',
      'test-auth-fix.ts',
      'test-extended-timeout.ts'
    ];

    let cleanedCount = 0;
    let notFoundCount = 0;

    for (const file of tempFiles) {
      const filePath = path.join(projectDir, file);
      
      if (fs.existsSync(filePath)) {
        try {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${file}`);
          cleanedCount++;
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${file}: ${error}`);
        }
      } else {
        notFoundCount++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:`);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${cleanedCount}`);
    console.log(`‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundCount}`);
    console.log(`üìÅ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${tempFiles.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ
    const requiredFiles = [
      'scripts/migration-pipeline.ts',
      'scripts/deploy-migrations.sh',
      'scripts/fix-migrations.ts',
      'Dockerfile.migrations',
      'docker-compose.migrations.yml',
      'MIGRATION_PIPELINE.md',
      'CHASE_MIGRATIONS.md'
    ];

    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–∞–π–ø–ª–∞–π–Ω–∞:`);
    
    for (const file of requiredFiles) {
      const filePath = path.join(projectDir, file);
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file}`);
      } else {
        console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
      }
    }

    console.log(`\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

cleanupMigrationFiles();

