import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function fixMigrations() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    const migrationTable = await prisma.$queryRaw`
      SELECT migration_name, finished_at 
      FROM "_prisma_migrations" 
      ORDER BY finished_at DESC 
      LIMIT 10
    ` as any[];

    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    migrationTable.forEach(m => {
      console.log(`- ${m.migration_name} (${m.finished_at})`);
    });

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    console.log('\nüìù –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π...');

    const missingMigrations = [
      '20250130_resolve_drift',
      '20250815_add_aggregator_merchants'
    ];

    for (const migrationName of missingMigrations) {
      try {
        await prisma.$executeRaw`
          INSERT INTO "_prisma_migrations" (id, checksum, finished_at, migration_name, logs, rolled_back_at, started_at, applied_steps_count)
          VALUES (
            gen_random_uuid(),
            '',
            NOW(),
            ${migrationName},
            NULL,
            NULL,
            NOW(),
            1
          )
          ON CONFLICT (migration_name) DO NOTHING
        `;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationName}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: ${error}`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    
    const finalStatus = await prisma.$queryRaw`
      SELECT COUNT(*) as total_migrations
      FROM "_prisma_migrations"
    ` as any[];

    console.log(`–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${finalStatus[0].total_migrations}`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name NOT LIKE '_prisma_%'
      ORDER BY table_name
    ` as any[];

    console.log('–¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    tables.forEach(t => console.log(`- ${t.table_name}`));

    console.log('\nüéâ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

fixMigrations();

