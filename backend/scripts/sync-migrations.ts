import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function syncMigrations() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbMigrations = await prisma.$queryRaw`
      SELECT migration_name, finished_at 
      FROM "_prisma_migrations" 
      WHERE finished_at IS NOT NULL
      ORDER BY finished_at
    ` as any[];

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${dbMigrations.length} –º–∏–≥—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(process.cwd(), 'prisma', 'migrations');
    const localMigrations = fs.readdirSync(migrationsDir)
      .filter(name => name !== 'migration_lock.toml')
      .sort();

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${localMigrations.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π`);

    // 3. –ù–∞—Ö–æ–¥–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
    const missingLocally = dbMigrations
      .map(m => m.migration_name)
      .filter(name => !localMigrations.includes(name));

    if (missingLocally.length > 0) {
      console.log('\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ë–î, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ:');
      missingLocally.forEach(name => console.log(`- ${name}`));
    }

    // 4. –ù–∞—Ö–æ–¥–∏–º –º–∏–≥—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –ë–î
    const dbMigrationNames = dbMigrations.map(m => m.migration_name);
    const notApplied = localMigrations.filter(name => !dbMigrationNames.includes(name));

    if (notApplied.length > 0) {
      console.log('\nüìù –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏, –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –≤ –ë–î:');
      notApplied.forEach(name => console.log(`- ${name}`));
    }

    // 5. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ (–ø—É—Å—Ç—ã–µ)
    for (const migrationName of missingLocally) {
      const migrationPath = path.join(migrationsDir, migrationName);
      if (!fs.existsSync(migrationPath)) {
        fs.mkdirSync(migrationPath, { recursive: true });
        
        const migrationContent = `-- Migration ${migrationName}
-- This migration was applied to the database but the file was missing locally
-- Created during migration sync process

-- No changes needed as this migration was already applied
`;

        fs.writeFileSync(
          path.join(migrationPath, 'migration.sql'),
          migrationContent
        );
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: ${migrationName}`);
      }
    }

    // 6. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if (notApplied.length > 0) {
      console.log('\nüöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      
      for (const migrationName of notApplied) {
        try {
          const migrationPath = path.join(migrationsDir, migrationName, 'migration.sql');
          if (fs.existsSync(migrationPath)) {
            const sql = fs.readFileSync(migrationPath, 'utf8');
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            await prisma.$executeRawUnsafe(sql);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            await prisma.$executeRaw`
              INSERT INTO "_prisma_migrations" (
                id, checksum, finished_at, migration_name, logs, 
                rolled_back_at, started_at, applied_steps_count
              ) VALUES (
                gen_random_uuid(),
                '',
                NOW(),
                ${migrationName},
                NULL,
                NULL,
                NOW(),
                1
              )
            `;
            
            console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: ${migrationName}`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ ${migrationName}: ${error}`);
        }
      }
    }

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    
    const finalDbMigrations = await prisma.$queryRaw`
      SELECT COUNT(*) as count FROM "_prisma_migrations"
    ` as any[];

    const finalLocalMigrations = fs.readdirSync(migrationsDir)
      .filter(name => name !== 'migration_lock.toml').length;

    console.log(`üìä –ú–∏–≥—Ä–∞—Ü–∏–π –≤ –ë–î: ${finalDbMigrations[0].count}`);
    console.log(`üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: ${finalLocalMigrations}`);

    if (finalDbMigrations[0].count === finalLocalMigrations) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

syncMigrations();

