import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const prisma = new PrismaClient();

interface MigrationStatus {
  applied: string[];
  pending: string[];
  missing: string[];
}

async function getMigrationStatus(): Promise<MigrationStatus> {
  // –ü–æ–ª—É—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
  const dbMigrations = await prisma.$queryRaw`
    SELECT migration_name 
    FROM "_prisma_migrations" 
    WHERE finished_at IS NOT NULL
    ORDER BY migration_name
  ` as any[];

  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const migrationsDir = path.join(process.cwd(), 'prisma', 'migrations');
  const localMigrations = fs.readdirSync(migrationsDir)
    .filter(name => name !== 'migration_lock.toml')
    .sort();

  const dbMigrationNames = dbMigrations.map(m => m.migration_name);
  
  return {
    applied: dbMigrationNames,
    pending: localMigrations.filter(name => !dbMigrationNames.includes(name)),
    missing: dbMigrationNames.filter(name => !localMigrations.includes(name))
  };
}

async function applyMigration(migrationName: string): Promise<boolean> {
  try {
    const migrationPath = path.join(process.cwd(), 'prisma', 'migrations', migrationName, 'migration.sql');
    
    if (!fs.existsSync(migrationPath)) {
      console.log(`‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${migrationPath}`);
      return false;
    }

    const sql = fs.readFileSync(migrationPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    console.log(`üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${migrationName} (${commands.length} –∫–æ–º–∞–Ω–¥)...`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      if (command.trim()) {
        try {
          await prisma.$executeRawUnsafe(command);
          console.log(`  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞): ${error}`);
        }
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await prisma.$executeRaw`
      INSERT INTO "_prisma_migrations" (
        id, checksum, finished_at, migration_name, logs, 
        rolled_back_at, started_at, applied_steps_count
      ) VALUES (
        gen_random_uuid(),
        '',
        NOW(),
        ${migrationName},
        NULL,
        NULL,
        NOW(),
        1
      )
    `;

    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationName} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return true;

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ ${migrationName}: ${error}`);
    return false;
  }
}

async function createMissingMigration(migrationName: string): Promise<void> {
  const migrationPath = path.join(process.cwd(), 'prisma', 'migrations', migrationName);
  
  if (!fs.existsSync(migrationPath)) {
    fs.mkdirSync(migrationPath, { recursive: true });
    
    const migrationContent = `-- Migration ${migrationName}
-- This migration was applied to the database but the file was missing locally
-- Created during migration sync process

-- No changes needed as this migration was already applied
`;

    fs.writeFileSync(
      path.join(migrationPath, 'migration.sql'),
      migrationContent
    );
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: ${migrationName}`);
  }
}

async function runMigrationPipeline() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–π...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π...');
    const status = await getMigrationStatus();
    
    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${status.applied.length}`);
    console.log(`‚è≥ –û–∂–∏–¥–∞–µ—Ç: ${status.pending.length}`);
    console.log(`‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ: ${status.missing.length}`);

    // 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if (status.missing.length > 0) {
      console.log('\nüìù –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      for (const migrationName of status.missing) {
        await createMissingMigration(migrationName);
      }
    }

    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    if (status.pending.length > 0) {
      console.log('\nüöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      
      let successCount = 0;
      for (const migrationName of status.pending) {
        const success = await applyMigration(migrationName);
        if (success) successCount++;
      }
      
      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${status.pending.length} –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    }

    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalStatus = await getMigrationStatus();
    
    if (finalStatus.pending.length === 0) {
      console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const result = await prisma.$queryRaw`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name NOT LIKE '_prisma_%'
        ORDER BY table_name
      ` as any[];

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.length} —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      
    } else {
      console.log(`‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å ${finalStatus.pending.length} –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
runMigrationPipeline();

