#!/usr/bin/env bun

import { db } from '../db';
import { trafficClassificationService } from '../services/traffic-classification.service';

async function testUpdatedFiltering() {
  try {
    console.log('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò\n');
    console.log('üìã –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–¥–µ–ª–∫–∏ —Å clientIdentifier\n');

    const merchant = await db.merchant.findUnique({
      where: { token: 'trader9-test-merchant' }
    });

    const trader9 = await db.user.findUnique({
      where: { numericId: 9 }
    });

    if (!merchant || !trader9) {
      console.log('‚ùå –ú–µ—Ä—á–∞–Ω—Ç –∏–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    const testCanTakeTransaction = async (clientId: string | undefined, description: string) => {
      console.log(`üìù ${description}`);
      console.log(`   clientIdentifier: ${clientId || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
      
      const canTake = await trafficClassificationService.canTraderTakeTransaction(
        trader9.id,
        merchant.id,
        clientId
      );
      
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${canTake ? '‚úÖ –ú–û–ñ–ï–¢ –í–ó–Ø–¢–¨' : '‚ùå –ù–ï –ú–û–ñ–ï–¢ –í–ó–Ø–¢–¨'}`);
      return canTake;
    };

    // –¢–ï–°–¢ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
    console.log('üß™ –¢–ï–°–¢ 1: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê');
    await db.trafficSettings.upsert({
      where: { userId: trader9.id },
      update: { isEnabled: false },
      create: {
        userId: trader9.id,
        isEnabled: false,
        trafficType: 'PRIMARY',
        maxCounterparties: 10
      }
    });
    console.log('üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ #9');

    await testCanTakeTransaction('client_with_id', '–°–¥–µ–ª–∫–∞ –° clientIdentifier');
    await testCanTakeTransaction(undefined, '–°–¥–µ–ª–∫–∞ –ë–ï–ó clientIdentifier');

    // –¢–ï–°–¢ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
    console.log('\nüß™ –¢–ï–°–¢ 2: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –í–ö–õ–Æ–ß–ï–ù–ê');
    await db.trafficSettings.update({
      where: { userId: trader9.id },
      data: { 
        isEnabled: true,
        trafficType: 'PRIMARY',
        maxCounterparties: 10
      }
    });
    console.log('üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ #9 (PRIMARY —Ç—Ä–∞—Ñ–∏–∫)');

    await testCanTakeTransaction('new_client_001', '–°–¥–µ–ª–∫–∞ –° clientIdentifier (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - PRIMARY)');
    await testCanTakeTransaction(undefined, '–°–¥–µ–ª–∫–∞ –ë–ï–ó clientIdentifier (–¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å—Å—è)');

    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–µ–ª–∞–µ–º –µ–≥–æ SECONDARY)
    await db.transaction.create({
      data: {
        merchantId: merchant.id,
        amount: 1000,
        assetOrBank: 'Test History',
        orderId: `history-${Date.now()}`,
        methodId: 'cmf2iukal0001ik9amd2njmbm',
        currency: 'RUB',
        userId: 'test-user',
        callbackUri: '',
        successUri: '',
        failUri: '',
        type: 'IN',
        expired_at: new Date(),
        commission: 0,
        clientName: 'Test Client',
        status: 'READY',
        rate: 95.5,
        clientIdentifier: 'existing_client_001',
        traderId: trader9.id,
        bankDetailId: 'trader9-bt-requisite'
      }
    });

    await testCanTakeTransaction('existing_client_001', '–°–¥–µ–ª–∫–∞ –° clientIdentifier (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - SECONDARY, –Ω–æ —Ç—Ä–µ–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ PRIMARY)');

    // –¢–ï–°–¢ 3: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ SECONDARY —Ç—Ä–∞—Ñ–∏–∫
    console.log('\nüß™ –¢–ï–°–¢ 3: –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê SECONDARY –¢–†–ê–§–ò–ö');
    await db.trafficSettings.update({
      where: { userId: trader9.id },
      data: { trafficType: 'SECONDARY' }
    });
    console.log('üîß –¢—Ä–µ–π–¥–µ—Ä #9 –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ SECONDARY —Ç—Ä–∞—Ñ–∏–∫');

    await testCanTakeTransaction('new_client_002', '–°–¥–µ–ª–∫–∞ –° clientIdentifier (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - PRIMARY, –Ω–æ —Ç—Ä–µ–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ SECONDARY)');
    await testCanTakeTransaction('existing_client_001', '–°–¥–µ–ª–∫–∞ –° clientIdentifier (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç - SECONDARY)');
    await testCanTakeTransaction(undefined, '–°–¥–µ–ª–∫–∞ –ë–ï–ó clientIdentifier (–¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å—Å—è)');

    console.log('\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Üí –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç');
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ ‚Üí —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —Å clientIdentifier –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞');
    console.log('‚úÖ –°–¥–µ–ª–∫–∏ –±–µ–∑ clientIdentifier ‚Üí –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    console.log('‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ ‚Üí —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    console.log('\nüéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê:');
    console.log('–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–¥–µ–ª–∫–∏ —Å clientIdentifier!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

testUpdatedFiltering();
