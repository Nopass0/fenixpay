#!/usr/bin/env bun
import { db } from '../db';

/**
 * –¢–µ—Å—Ç admin mock endpoint —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
 */
async function testAdminInterval() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin mock endpoint —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º...\n');

  try {
    // –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const merchant = await db.merchant.findFirst({
      where: { name: 'Test Interval Merchant' },
    });

    const method = await db.method.findFirst({
      where: { code: 'sbp-test' },
    });

    if (!merchant || !method) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ test-interval-functionality.ts');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`  - –ú–µ—Ä—á–∞–Ω—Ç: ${merchant.id}`);
    console.log(`  - –ú–µ—Ç–æ–¥: ${method.id}`);

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ admin mock API
    console.log('\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ admin mock API...');

    const response1 = await fetch('http://localhost:3000/api/admin/transactions/mock/in', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        merchantId: merchant.id,
        amount: 1000,
        methodId: method.id,
        orderId: `admin-test-1-${Date.now()}`,
      }),
    });

    if (response1.ok) {
      const data1 = await response1.json();
      console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ admin API:', data1.id);
      console.log(`  - –†–µ–∫–≤–∏–∑–∏—Ç: ${data1.bankDetailId}`);
      console.log(`  - –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∫–≤–∏–∑–∏—Ç–∞: ${data1.requisites?.intervalMinutes || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    } else {
      const error1 = await response1.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error1);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ä–∞–∑—É
    console.log('\nüß™ –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ä–∞–∑—É...');

    const response2 = await fetch('http://localhost:3000/api/admin/transactions/mock/in', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        merchantId: merchant.id,
        amount: 1500,
        methodId: method.id,
        orderId: `admin-test-2-${Date.now()}`,
      }),
    });

    if (response2.ok) {
      const data2 = await response2.json();
      console.log('‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —Ä–µ–∫–≤–∏–∑–∏—Ç):', data2.id);
      console.log(`  - –†–µ–∫–≤–∏–∑–∏—Ç: ${data2.bankDetailId}`);
    } else {
      const error2 = await response2.text();
      console.log('‚úÖ –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:', error2);
    }

    console.log('\nüéâ –¢–µ—Å—Ç admin API —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ admin API:', error);
  } finally {
    await db.$disconnect();
  }
}

if (import.meta.main) {
  // –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
  setTimeout(testAdminInterval, 2000);
}
