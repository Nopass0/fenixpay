#!/usr/bin/env bun

import { db } from '../db';

async function setupTestAggregator() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞\n');

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    const aggregator = await db.aggregator.upsert({
      where: { email: 'mock-aggregator@test.com' },
      update: {
        apiToken: 'test-aggregator-api-key-123',
        callbackToken: 'test-aggregator-callback-key-123',
        apiBaseUrl: 'http://localhost:4000',
        balanceUsdt: 100000,
        isActive: true,
        priority: 1, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        maxSlaMs: 5000,
        minBalance: 0
      },
      create: {
        email: 'mock-aggregator@test.com',
        password: 'hash',
        name: 'Mock Test Aggregator',
        apiToken: 'test-aggregator-api-key-123',
        callbackToken: 'test-aggregator-callback-key-123',
        apiBaseUrl: 'http://localhost:4000',
        balanceUsdt: 100000,
        isActive: true,
        priority: 1,
        maxSlaMs: 5000,
        minBalance: 0
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω:');
    console.log(`   ID: ${aggregator.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${aggregator.name}`);
    console.log(`   API URL: ${aggregator.apiBaseUrl}`);
    console.log(`   API Token: ${aggregator.apiToken}`);
    console.log(`   Callback Token: ${aggregator.callbackToken}`);
    console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${aggregator.priority}`);
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${aggregator.balanceUsdt} USDT`);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è UI)
    const session = await db.aggregatorSession.create({
      data: {
        aggregatorId: aggregator.id,
        token: `test-aggregator-session-${Date.now()}`,
        ip: '127.0.0.1',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
      }
    });

    console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${session.token}`);

    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä ID: ${aggregator.id}`);
    console.log(`API Token: ${aggregator.apiToken}`);
    console.log(`Base URL: ${aggregator.apiBaseUrl}`);
    console.log(`Session Token: ${session.token}`);

    console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: bun run mock-aggregator-server.ts');
    console.log('2. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–π API');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ clientIdentifier –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

setupTestAggregator();
