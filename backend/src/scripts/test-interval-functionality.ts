#!/usr/bin/env bun
import { db } from '../db';
import { BankType, MethodType, Status, TransactionType } from '@prisma/client';

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö
 */
async function testIntervalFunctionality() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏...\n');

  try {
    // 1. –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
    let trader = await db.user.findFirst({
      where: { email: 'test-interval-trader@example.com' },
    });

    if (!trader) {
      trader = await db.user.create({
        data: {
          email: 'test-interval-trader@example.com',
          password: 'test',
          name: 'Test Interval Trader',
          balanceUsdt: 1000,
          balanceRub: 100000,
          minAmountPerRequisite: 100,
          maxAmountPerRequisite: 50000,
        },
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–π–¥–µ—Ä:', trader.id);
    } else {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–π–¥–µ—Ä:', trader.id);
    }

    // 2. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 –º–∏–Ω—É—Ç—ã
    const requisite = await db.bankDetail.create({
      data: {
        userId: trader.id,
        methodType: MethodType.sbp,
        bankType: BankType.SBERBANK,
        cardNumber: '+79001234567',
        recipientName: 'Test Trader',
        phoneNumber: '+79001234567',
        minAmount: 100,
        maxAmount: 50000,
        intervalMinutes: 2, // 2 –º–∏–Ω—É—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª
        operationLimit: 10,
        sumLimit: 100000,
        isActive: true,
      },
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 –º–∏–Ω—É—Ç—ã:', requisite.id);

    // 3. –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    let merchant = await db.merchant.findFirst({
      where: { name: 'Test Interval Merchant' },
    });

    if (!merchant) {
      merchant = await db.merchant.create({
        data: {
          name: 'Test Interval Merchant',
          token: `test-interval-token-${Date.now()}`,
          balanceUsdt: 1000,
          countInRubEquivalent: false,
        },
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç:', merchant.id);
    } else {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ä—á–∞–Ω—Ç:', merchant.id);
    }

    // 4. –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
    let method = await db.method.findFirst({
      where: { type: 'sbp', isEnabled: true },
    });

    if (!method) {
      method = await db.method.create({
        data: {
          code: 'sbp-test',
          name: 'SBP Test',
          type: 'sbp',
          currency: 'rub',
          isEnabled: true,
          minPayin: 100,
          maxPayin: 50000,
          minPayout: 100,
          maxPayout: 50000,
          commissionPayin: 0,
          commissionPayout: 0,
          chancePayin: 1.0,
          chancePayout: 1.0,
        },
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥:', method.id);
    } else {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥:', method.id);
    }

    // 5. –ü—Ä–∏–≤—è–∑–∞—Ç—å –º–µ—Ç–æ–¥ –∫ –º–µ—Ä—á–∞–Ω—Ç—É
    const merchantMethod = await db.merchantMethod.upsert({
      where: {
        merchantId_methodId: {
          merchantId: merchant.id,
          methodId: method.id,
        },
      },
      create: {
        merchantId: merchant.id,
        methodId: method.id,
        isEnabled: true,
      },
      update: {
        isEnabled: true,
      },
    });

    console.log('‚úÖ –ú–µ—Ç–æ–¥ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–µ—Ä—á–∞–Ω—Ç—É');

    // 6. –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏)
    console.log('\nüß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    const transaction1 = await db.transaction.create({
      data: {
        merchantId: merchant.id,
        bankDetailId: requisite.id,
        amount: 1000,
        assetOrBank: 'SBERBANK',
        orderId: `test-order-1-${Date.now()}`,
        methodId: method.id,
        currency: 'RUB',
        userId: `user_${Date.now()}`,
        userIp: '127.0.0.1',
        callbackUri: '',
        successUri: '',
        failUri: '',
        type: TransactionType.IN,
        expired_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
        commission: 0,
        clientName: 'Test Client',
        status: Status.CREATED,
        rate: 100,
        traderId: trader.id,
      },
    });

    console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', transaction1.id);

    // 7. –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ä–∞–∑—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
    console.log('\nüß™ –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å—Ä–∞–∑—É...');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –∏–∑ merchant endpoint
    const intervalStart = new Date();
    intervalStart.setMinutes(intervalStart.getMinutes() - requisite.intervalMinutes);
    
    const recentTransaction = await db.transaction.findFirst({
      where: {
        bankDetailId: requisite.id,
        createdAt: {
          gte: intervalStart,
        },
        status: {
          notIn: [Status.CANCELED, Status.EXPIRED],
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (recentTransaction) {
      const timeSinceLastTransaction = Math.floor(
        (Date.now() - recentTransaction.createdAt.getTime()) / (1000 * 60)
      );
      console.log(
        `‚ùå –†–µ–∫–≤–∏–∑–∏—Ç ${requisite.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω: –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω. ` +
        `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${timeSinceLastTransaction} –º–∏–Ω –Ω–∞–∑–∞–¥, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${requisite.intervalMinutes} –º–∏–Ω`
      );
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!');
    }

    // 8. –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
    console.log('\nüß™ –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥...');
    
    const threeMinutesAgo = new Date();
    threeMinutesAgo.setMinutes(threeMinutesAgo.getMinutes() - 3);
    
    await db.transaction.update({
      where: { id: transaction1.id },
      data: { createdAt: threeMinutesAgo },
    });

    console.log('‚úÖ –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');

    // 9. –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ—Ç—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
    console.log('\nüß™ –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ—Ç—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...');
    
    const intervalStart2 = new Date();
    intervalStart2.setMinutes(intervalStart2.getMinutes() - requisite.intervalMinutes);
    
    const recentTransaction2 = await db.transaction.findFirst({
      where: {
        bankDetailId: requisite.id,
        createdAt: {
          gte: intervalStart2,
        },
        status: {
          notIn: [Status.CANCELED, Status.EXPIRED],
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    if (!recentTransaction2) {
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏—Å—Ç–µ–∫ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
      
      const transaction3 = await db.transaction.create({
        data: {
          merchantId: merchant.id,
          bankDetailId: requisite.id,
          amount: 1500,
          assetOrBank: 'SBERBANK',
          orderId: `test-order-3-${Date.now()}`,
          methodId: method.id,
          currency: 'RUB',
          userId: `user_${Date.now()}`,
          userIp: '127.0.0.1',
          callbackUri: '',
          successUri: '',
          failUri: '',
          type: TransactionType.IN,
          expired_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
          commission: 0,
          clientName: 'Test Client',
          status: Status.CREATED,
          rate: 100,
          traderId: trader.id,
        },
      });
      
      console.log('‚úÖ –¢—Ä–µ—Ç—å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', transaction3.id);
    } else {
      const timeSinceLastTransaction = Math.floor(
        (Date.now() - recentTransaction2.createdAt.getTime()) / (1000 * 60)
      );
      console.log(
        `‚ùå –û–®–ò–ë–ö–ê: –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã–ª –∏—Å—Ç–µ—á—å, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è. ` +
        `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${timeSinceLastTransaction} –º–∏–Ω –Ω–∞–∑–∞–¥`
      );
    }

    // 10. –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüß™ –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...');
    
    const requisiteNoInterval = await db.bankDetail.create({
      data: {
        userId: trader.id,
        methodType: MethodType.c2c,
        bankType: BankType.VTB,
        cardNumber: '4111111111111111',
        recipientName: 'Test Trader No Interval',
        minAmount: 100,
        maxAmount: 50000,
        intervalMinutes: 0, // –ë–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        operationLimit: 10,
        sumLimit: 100000,
        isActive: true,
      },
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', requisiteNoInterval.id);

    // –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const transaction4 = await db.transaction.create({
      data: {
        merchantId: merchant.id,
        bankDetailId: requisiteNoInterval.id,
        amount: 2000,
        assetOrBank: 'VTB',
        orderId: `test-order-4-${Date.now()}`,
        methodId: method.id,
        currency: 'RUB',
        userId: `user_${Date.now()}`,
        userIp: '127.0.0.1',
        callbackUri: '',
        successUri: '',
        failUri: '',
        type: TransactionType.IN,
        expired_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
        commission: 0,
        clientName: 'Test Client',
        status: Status.CREATED,
        rate: 100,
        traderId: trader.id,
      },
    });

    console.log('‚úÖ –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transaction4.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç (intervalMinutes = 0)
    if (requisiteNoInterval.intervalMinutes === 0) {
      console.log('‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª = 0, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      
      const transaction5 = await db.transaction.create({
        data: {
          merchantId: merchant.id,
          bankDetailId: requisiteNoInterval.id,
          amount: 2500,
          assetOrBank: 'VTB',
          orderId: `test-order-5-${Date.now()}`,
          methodId: method.id,
          currency: 'RUB',
          userId: `user_${Date.now()}`,
          userIp: '127.0.0.1',
          callbackUri: '',
          successUri: '',
          failUri: '',
          type: TransactionType.IN,
          expired_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
          commission: 0,
          clientName: 'Test Client',
          status: Status.CREATED,
          rate: 100,
          traderId: trader.id,
        },
      });
      
      console.log('‚úÖ –ü—è—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–π:', transaction5.id);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∑—é–º–µ —Ç–µ—Å—Ç–æ–≤:');
    console.log('- ‚úÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    console.log('- ‚úÖ –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    console.log('- ‚úÖ –¢—Ä–µ—Ç—å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    console.log('- ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  } finally {
    await db.$disconnect();
  }
}

if (import.meta.main) {
  testIntervalFunctionality();
}
