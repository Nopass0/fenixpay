import { db } from "../db";

// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ HTTP API
async function testDirectAPI() {
  console.log("üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–æ–≤...");

  try {
    // –ù–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ä
    const dispute = await db.dealDispute.findFirst({
      where: {
        status: {
          in: ["OPEN", "IN_PROGRESS"]
        }
      },
      include: {
        deal: {
          include: {
            trader: {
              select: {
                id: true,
                name: true,
                trustBalance: true,
                deposit: true,
                frozenUsdt: true
              }
            }
          }
        }
      }
    });

    if (!dispute) {
      console.log("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤");
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω —Å–ø–æ—Ä: ${dispute.id}`);
    console.log(`- –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞: ${dispute.status}`);
    console.log(`- –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: ${dispute.deal.status}`);
    console.log(`- –°—É–º–º–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏: ${dispute.deal.frozenUsdtAmount || 0} USDT`);

    if (dispute.deal.trader) {
      console.log(`\nüë§ –¢—Ä–µ–π–¥–µ—Ä (${dispute.deal.trader.name}):`);
      console.log(`- Trust Balance: ${dispute.deal.trader.trustBalance} USDT`);
      console.log(`- Deposit: ${dispute.deal.trader.deposit} USDT`);
      console.log(`- Frozen: ${dispute.deal.trader.frozenUsdt} USDT`);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é
    console.log("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑—É –ú–ï–†–ß–ê–ù–¢–ê...");
    
    await db.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞
      await tx.dealDispute.update({
        where: { id: dispute.id },
        data: {
          status: "RESOLVED_SUCCESS",
          resolution: "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É –º–µ—Ä—á–∞–Ω—Ç–∞ (–ø—Ä—è–º–æ–π —Ç–µ—Å—Ç)",
          resolvedAt: new Date(),
        },
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await tx.dealDisputeMessage.create({
        data: {
          disputeId: dispute.id,
          senderId: "system",
          senderType: "ADMIN",
          message: "–°–ø–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –º–µ—Ä—á–∞–Ω—Ç–∞ (–ø—Ä—è–º–æ–π —Ç–µ—Å—Ç)",
        },
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —Å–¥–µ–ª–∫–∏
      const deal = dispute.deal;
      const frozenAmount = deal.frozenUsdtAmount || 0;

      // –í –ø–æ–ª—å–∑—É –º–µ—Ä—á–∞–Ω—Ç–∞ - —Å–¥–µ–ª–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è EXPIRED
      await tx.transaction.update({
        where: { id: dispute.dealId },
        data: {
          status: "EXPIRED",
        },
      });

      // –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ READY, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞/–¥–µ–ø–æ–∑–∏—Ç–∞
      if (deal.status === "READY" && deal.traderId && frozenAmount > 0) {
        const trader = await tx.user.findUnique({
          where: { id: deal.traderId },
          select: { trustBalance: true, deposit: true }
        });

        if (trader) {
          const roundedFrozenAmount = Math.ceil(frozenAmount * 100) / 100;
          
          if (trader.trustBalance >= roundedFrozenAmount) {
            await tx.user.update({
              where: { id: deal.traderId },
              data: {
                frozenUsdt: { decrement: frozenAmount },
                trustBalance: { decrement: roundedFrozenAmount },
              },
            });
            console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–æ ${roundedFrozenAmount} USDT —Å trust balance`);
          } else {
            const remainingAmount = roundedFrozenAmount - trader.trustBalance;
            await tx.user.update({
              where: { id: deal.traderId },
              data: {
                frozenUsdt: { decrement: frozenAmount },
                trustBalance: 0,
                deposit: { decrement: remainingAmount },
              },
            });
            console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–æ ${trader.trustBalance} USDT —Å trust balance –∏ ${remainingAmount} USDT —Å –¥–µ–ø–æ–∑–∏—Ç–∞`);
          }
        }
      } else {
        // –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å
        if (frozenAmount > 0 && deal.traderId) {
          await tx.user.update({
            where: { id: deal.traderId },
            data: {
              frozenUsdt: { decrement: frozenAmount },
            },
          });
          console.log(`‚úÖ –†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ ${frozenAmount} USDT`);
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedDispute = await db.dealDispute.findUnique({
      where: { id: dispute.id },
      include: {
        deal: {
          include: {
            trader: {
              select: {
                id: true,
                name: true,
                trustBalance: true,
                deposit: true,
                frozenUsdt: true
              }
            }
          }
        }
      }
    });

    if (updatedDispute) {
      console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
      console.log(`- –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞: ${updatedDispute.status}`);
      console.log(`- –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: ${updatedDispute.deal.status}`);
      console.log(`- –†–µ—à–µ–Ω–∏–µ: ${updatedDispute.resolution}`);
      
      if (updatedDispute.deal.trader) {
        console.log(`\nüë§ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä–∞:`);
        console.log(`- Trust Balance: ${updatedDispute.deal.trader.trustBalance} USDT`);
        console.log(`- Deposit: ${updatedDispute.deal.trader.deposit} USDT`);
        console.log(`- Frozen: ${updatedDispute.deal.trader.frozenUsdt} USDT`);
      }
    }

    console.log("\n‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  }
}

testDirectAPI();

