/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
 * 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ callback'–æ–≤ –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–µ
 */

import { db } from "@/db";
import { Status } from "@prisma/client";
import { auctionSignatureUtils } from "@/utils/auction-signature";
import { CreateOrderRequest } from "@/types/auction";
import { sendTransactionCallbacks } from "@/utils/notify";
import { createServer } from "http";

class AuctionFullFlowTester {
  private testServer: any = null;
  private receivedCallbacks: any[] = [];
  private serverPort = 3334;
  private merchantId = "";
  private privateKey = "";
  private externalSystemName = "test-auction-system";

  async startTestServer() {
    return new Promise<void>((resolve) => {
      this.testServer = createServer((req, res) => {
        if (req.method === 'POST') {
          let body = '';
          
          req.on('data', chunk => {
            body += chunk.toString();
          });
          
          req.on('end', () => {
            try {
              const callback = JSON.parse(body);
              console.log(`üì• [${req.url}] –ü–æ–ª—É—á–µ–Ω callback:`, callback);
              
              this.receivedCallbacks.push({
                url: req.url,
                headers: req.headers,
                body: callback,
                timestamp: new Date()
              });
              
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'received' }));
            } catch (error) {
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        } else {
          res.writeHead(404);
          res.end('Not Found');
        }
      });

      this.testServer.listen(this.serverPort, () => {
        console.log(`üåê –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.serverPort}`);
        resolve();
      });
    });
  }

  async stopTestServer() {
    if (this.testServer) {
      this.testServer.close();
      console.log("üõë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  async setupAuctionMerchant() {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");

    const merchant = await db.merchant.findFirst({
      where: { name: "Test Auction Merchant" }
    });

    if (!merchant) {
      throw new Error("–ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ä—á–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    this.merchantId = merchant.id;
    this.privateKey = merchant.rsaPrivateKeyPem!;

    // –û–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è callback'–æ–≤ –Ω–∞ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    await db.merchant.update({
      where: { id: merchant.id },
      data: { auctionBaseUrl: `http://localhost:${this.serverPort}` }
    });

    console.log(`‚úÖ –ú–µ—Ä—á–∞–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${merchant.name} (ID: ${this.merchantId})`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π API
   */
  async createOrderViaAPI() {
    console.log("\nüì° –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π API...");

    const systemOrderId = `FULL_FLOW_TEST_${Date.now()}`;
    const timestamp = Math.floor(Date.now() / 1000);
    
    const request: CreateOrderRequest = {
      system_order_id: systemOrderId,
      currency: "USDT",
      max_exchange_rate: 100.0,
      max_commission: 2.5,
      amount: 7500,
      cancel_order_time_unix: timestamp + 600,
      stop_auction_time_unix: timestamp + 300,
      callback_url: `http://localhost:${this.serverPort}/external-callback`,
      allowed_payment_method: "sbp",
      iterative_sum_search_enabled: true,
      allowed_bank_name: "–°–±–µ—Ä–±–∞–Ω–∫"
    };

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const canonicalString = auctionSignatureUtils.createCanonicalString(
      timestamp,
      this.externalSystemName,
      systemOrderId,
      "CreateOrder"
    );

    const signature = auctionSignatureUtils.signCanonicalString(canonicalString, this.privateKey);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch("http://localhost:3000/api/auction/external/CreateOrder", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Timestamp": timestamp.toString(),
        "X-Signature": signature,
      },
      body: JSON.stringify(request)
    });

    const result = await response.json();

    if (result.is_success) {
      console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:");
      console.log(`   External Order ID: ${result.external_order_id}`);
      console.log(`   System Order ID: ${systemOrderId}`);
      console.log(`   –†–µ–∫–≤–∏–∑–∏—Ç—ã:`, result.payment_details);
      
      return {
        externalOrderId: result.external_order_id,
        systemOrderId,
        transaction: result
      };
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${result.error_message}`);
    }
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å callback'–∞–º–∏
   */
  async simulateTransactionLifecycle(externalOrderId: string) {
    console.log("\nüîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

    const transaction = await db.transaction.findFirst({
      where: { id: externalOrderId },
      include: {
        merchant: true,
        method: true,
        trader: true,
        requisites: true,
      }
    });

    if (!transaction) {
      throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    // –û—á–∏—â–∞–µ–º callback'–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    this.receivedCallbacks = [];

    // –®–∞–≥ 1: IN_PROGRESS
    console.log("\nüìà –®–∞–≥ 1: –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ IN_PROGRESS...");
    await db.transaction.update({
      where: { id: transaction.id },
      data: { status: Status.IN_PROGRESS }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback
    const updatedTx1 = await db.transaction.findFirst({
      where: { id: transaction.id },
      include: { merchant: true, method: true, trader: true, requisites: true }
    });
    await sendTransactionCallbacks(updatedTx1!);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –®–∞–≥ 2: READY  
    console.log("\nüìà –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (READY)...");
    await db.transaction.update({
      where: { id: transaction.id },
      data: { status: Status.READY, acceptedAt: new Date() }
    });

    const updatedTx2 = await db.transaction.findFirst({
      where: { id: transaction.id },
      include: { merchant: true, method: true, trader: true, requisites: true }
    });
    await sendTransactionCallbacks(updatedTx2!);

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ callback'–æ–≤ –∑–∞ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${this.receivedCallbacks.length}`);

    let auctionCallbacks = 0;
    let merchantCallbacks = 0;

    this.receivedCallbacks.forEach((cb, index) => {
      console.log(`\n   Callback ${index + 1}:`);
      console.log(`     URL: ${cb.url}`);
      console.log(`     –í—Ä–µ–º—è: ${cb.timestamp.toISOString()}`);
      
      if (cb.body.order_id) {
        console.log(`     –¢–∏–ø: –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π (order_id: ${cb.body.order_id}, status_id: ${cb.body.status_id})`);
        console.log(`     RSA –ø–æ–¥–ø–∏—Å—å: ${cb.headers['x-signature'] ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        auctionCallbacks++;
      } else {
        console.log(`     –¢–∏–ø: –ú–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–π (id: ${cb.body.id}, status: ${cb.body.status})`);
        merchantCallbacks++;
      }
    });

    console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ê—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö callback'–æ–≤: ${auctionCallbacks}`);
    console.log(`   –ú–µ—Ä—á–∞–Ω—Ç—Å–∫–∏—Ö callback'–æ–≤: ${merchantCallbacks}`);

    return {
      total: this.receivedCallbacks.length,
      auctionCallbacks,
      merchantCallbacks
    };
  }

  /**
   * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É
   */
  async runFullFlowTest() {
    console.log("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É —Å callback'–∞–º–∏");
    console.log("=".repeat(60));

    try {
      // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
      await this.startTestServer();
      await this.setupAuctionMerchant();

      // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      const order = await this.createOrderViaAPI();

      // 3. –°–∏–º—É–ª—è—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      const stats = await this.simulateTransactionLifecycle(order.externalOrderId);

      console.log("\nüéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stats.total} callback'–æ–≤ (${stats.auctionCallbacks} –∞—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö + ${stats.merchantCallbacks} –º–µ—Ä—á–∞–Ω—Ç—Å–∫–∏—Ö)`);

      if (stats.auctionCallbacks >= 2) {
        console.log("‚úÖ –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–µ callback'–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
      } else {
        console.log("‚ùå –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–µ callback'–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!");
      }

    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:", error);
    } finally {
      await this.stopTestServer();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new AuctionFullFlowTester();
  await tester.runFullFlowTest();
  process.exit(0);
}

if (require.main === module) {
  main().catch(console.error);
}

export { AuctionFullFlowTester };
