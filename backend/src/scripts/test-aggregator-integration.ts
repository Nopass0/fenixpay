#!/usr/bin/env bun

import { db } from '../db';

async function testAggregatorIntegration() {
  try {
    console.log('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ê–ì–†–ï–ì–ê–¢–û–†–û–ú\n');

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    const merchant = await db.merchant.findUnique({
      where: { token: 'trader9-test-merchant' }
    });

    if (!merchant) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä...');
    const healthCheck = await fetch('http://localhost:4000/health');
    const healthData = await healthCheck.json();
    console.log(`‚úÖ –ú–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${healthData.service}`);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–π API
    const createTransactionForAggregator = async (clientId: string, amount: number = 5000) => {
      console.log(`\nüìù –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É:`);
      console.log(`   –ö–ª–∏–µ–Ω—Ç: ${clientId}`);
      console.log(`   –°—É–º–º–∞: ${amount} RUB`);
      
      const orderId = `aggregator-test-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
      
      const response = await fetch('http://localhost:3000/api/merchant/transactions/in', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-merchant-api-key': merchant.token
        },
        body: JSON.stringify({
          amount,
          methodId: 'cmf2iukal0001ik9amd2njmbm',
          orderId,
          rate: 95.5,
          expired_at: new Date(Date.now() + 3600000).toISOString(),
          clientIdentifier: clientId,
          userIp: '192.168.1.100',
          callbackUri: 'https://example.com/callback'
        })
      });

      const result = await response.json();
      
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${response.status} - ${result.status || result.error}`);
      
      if (response.status === 201) {
        console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${result.id}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É
        const transaction = await db.transaction.findUnique({
          where: { id: result.id },
          include: { aggregator: true }
        });
        
        if (transaction?.aggregator) {
          console.log(`   üîó –ü–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É: ${transaction.aggregator.name}`);
          return { success: true, transactionId: result.id, aggregatorId: transaction.aggregator.id };
        } else {
          console.log('   ‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É (–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç—Ä–µ–π–¥–µ—Ä—É)');
          return { success: true, transactionId: result.id, aggregatorId: null };
        }
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${result.error}`);
        return { success: false, error: result.error };
      }
    };

    // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ clientIdentifier
    console.log('\nüß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å clientIdentifier');
    
    const test1 = await createTransactionForAggregator('agg_client_primary_001', 3000);
    const test2 = await createTransactionForAggregator('agg_client_primary_002', 4000);
    const test3 = await createTransactionForAggregator('agg_client_secondary_001', 3500);

    // –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–¥–µ–ª–∫–∏ —Å clientIdentifier
    console.log('\nüß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–∫–æ–≤–æ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ');
    
    const aggregatorDeals = await fetch('http://localhost:4000/deals', {
      headers: { 'X-Api-Key': 'test-aggregator-api-key-123' }
    });
    const dealsData = await aggregatorDeals.json();
    
    console.log(`üìä –°–¥–µ–ª–∫–∏ –≤ –º–æ–∫–æ–≤–æ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ: ${dealsData.deals?.length || 0}`);
    
    if (dealsData.deals && dealsData.deals.length > 0) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ:');
      dealsData.deals.forEach((deal: any, idx: number) => {
        console.log(`${idx + 1}. ID: ${deal.partnerDealId}`);
        console.log(`   –ù–∞—à ID: ${deal.ourDealId}`);
        console.log(`   –ö–ª–∏–µ–Ω—Ç: ${deal.clientIdentifier || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –°—É–º–º–∞: ${deal.amount} RUB`);
        console.log(`   –ú–µ—Ç–æ–¥: ${deal.paymentMethod}`);
        console.log(`   –†–µ–∫–≤–∏–∑–∏—Ç—ã: ${deal.requisites?.cardNumber || deal.requisites?.phoneNumber || '–Ω–µ—Ç'}`);
        console.log('');
      });
    }

    // –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ
    console.log('üß™ –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ');
    
    const clientStats = await fetch('http://localhost:4000/stats/clients', {
      headers: { 'X-Api-Key': 'test-aggregator-api-key-123' }
    });
    const statsData = await clientStats.json();
    
    if (statsData.clientStats) {
      console.log(`üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${statsData.totalClients}`);
      console.log(`üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${statsData.totalDeals}`);
      
      console.log('\nüè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ:');
      statsData.clientStats.forEach((stat: any) => {
        console.log(`   ${stat.clientIdentifier}: ${stat.transactionCount} —Å–¥–µ–ª–æ–∫ (${stat.trafficType})`);
      });
    }

    // –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    console.log('\nüß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    
    const integrationLogs = await db.aggregatorIntegrationLog.findMany({
      where: {
        aggregatorId: 'cmf2nwx040000ik4ck7nf2xd5',
        eventType: 'deal_create'
      },
      orderBy: { createdAt: 'desc' },
      take: 3
    });

    console.log(`üìã –õ–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${integrationLogs.length}`);
    integrationLogs.forEach((log, idx) => {
      console.log(`${idx + 1}. ${log.eventType} - ${log.statusCode} - ${log.responseTimeMs}ms`);
      if (log.requestBody && typeof log.requestBody === 'object') {
        const reqBody = log.requestBody as any;
        console.log(`   –ö–ª–∏–µ–Ω—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ: ${reqBody.clientIdentifier || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      }
    });

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚úÖ –ú–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–π API');
    console.log('‚úÖ clientIdentifier –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É');
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ X-Api-Key —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã');

    console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('   –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä health: http://localhost:4000/health');
    console.log('   –í—Å–µ —Å–¥–µ–ª–∫–∏: http://localhost:4000/deals (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º X-Api-Key)');
    console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:4000/stats/clients (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º X-Api-Key)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

testAggregatorIntegration();
