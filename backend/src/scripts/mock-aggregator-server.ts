#!/usr/bin/env bun

import { Elysia, t } from "elysia";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–æ–∫–æ–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
interface DealRequest {
  ourDealId: string;
  status: string;
  amount: number;
  merchantRate: number;
  paymentMethod: "SBP" | "C2C";
  bankType?: string;
  callbackUrl: string;
  clientIdentifier?: string;
  metadata?: any;
}

interface DealResponse {
  accepted: boolean;
  partnerDealId?: string;
  message?: string;
  requisites?: {
    bankName?: string;
    cardNumber?: string;
    phoneNumber?: string;
    recipientName?: string;
    bankCode?: string;
    additionalInfo?: string;
  };
  dealDetails?: {
    id: string;
    amount: number;
    status: string;
    createdAt: string;
    expiresAt: string;
    paymentMethod: string;
    metadata?: any;
  };
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–¥–µ–ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏
const deals = new Map<string, any>();
let dealCounter = 1;

// –í–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const VALID_API_KEY = "test-aggregator-api-key-123";

// –ú–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä
const mockAggregator = new Elysia()
  .onRequest(({ request }) => {
    console.log(`üì• [MockAggregator] ${request.method} ${new URL(request.url).pathname}`);
  })

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞
  .derive(({ headers, set }) => {
    const apiKey = headers['x-api-key'];
    if (!apiKey || apiKey !== VALID_API_KEY) {
      set.status = 401;
      return { error: 'Unauthorized: Invalid or missing X-Api-Key header' };
    }
    return { authorized: true };
  })

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
  .post(
    "/deals",
    async ({ body, set }) => {
      try {
        console.log('üéØ [MockAggregator] –ü–æ–ª—É—á–µ–Ω–∞ —Å–¥–µ–ª–∫–∞:', {
          ourDealId: body.ourDealId,
          amount: body.amount,
          paymentMethod: body.paymentMethod,
          clientIdentifier: body.clientIdentifier,
          bankType: body.bankType
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–¥–µ–ª–∫–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        const partnerDealId = `AGG-MOCK-${dealCounter++}-${Date.now()}`;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–∞
        let requisites: any = {
          bankName: '–°–±–µ—Ä–±–∞–Ω–∫',
          recipientName: '–û–û–û –ú–æ–∫–æ–≤—ã–π –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä',
          bankCode: 'SBERBANK'
        };

        if (body.paymentMethod === 'SBP') {
          requisites.phoneNumber = '+79991234567';
          requisites.additionalInfo = '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü';
        } else if (body.paymentMethod === 'C2C') {
          requisites.cardNumber = '5555666677778888';
          requisites.additionalInfo = '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É';
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        const deal = {
          ourDealId: body.ourDealId,
          partnerDealId,
          amount: body.amount,
          status: 'CREATED',
          paymentMethod: body.paymentMethod,
          clientIdentifier: body.clientIdentifier,
          requisites,
          createdAt: new Date().toISOString(),
          expiresAt: new Date(Date.now() + 3600000).toISOString(), // 1 —á–∞—Å
          metadata: body.metadata
        };

        deals.set(partnerDealId, deal);

        console.log('‚úÖ [MockAggregator] –°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:', {
          partnerDealId,
          clientIdentifier: body.clientIdentifier,
          requisites: requisites.cardNumber || requisites.phoneNumber
        });

        const response: DealResponse = {
          accepted: true,
          partnerDealId,
          message: 'Deal created successfully',
          requisites,
          dealDetails: {
            id: partnerDealId,
            amount: body.amount,
            status: 'CREATED',
            createdAt: deal.createdAt,
            expiresAt: deal.expiresAt,
            paymentMethod: body.paymentMethod,
            metadata: {
              ...body.metadata,
              clientIdentifier: body.clientIdentifier
            }
          }
        };

        set.status = 200;
        return response;

      } catch (error) {
        console.error('‚ùå [MockAggregator] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
        set.status = 400;
        return { 
          accepted: false, 
          message: 'Failed to create deal',
          error: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    },
    {
      body: t.Object({
        ourDealId: t.String(),
        status: t.String(),
        amount: t.Number(),
        merchantRate: t.Number(),
        paymentMethod: t.Union([t.Literal("SBP"), t.Literal("C2C")]),
        bankType: t.Optional(t.String()),
        callbackUrl: t.String(),
        clientIdentifier: t.Optional(t.String()),
        metadata: t.Optional(t.Any())
      })
    }
  )

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ
  .get(
    "/deals/:partnerDealId",
    async ({ params, set }) => {
      const deal = deals.get(params.partnerDealId);
      
      if (!deal) {
        set.status = 404;
        return { error: 'Deal not found' };
      }

      console.log('üìã [MockAggregator] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ:', params.partnerDealId);
      
      return {
        success: true,
        deal: {
          id: deal.partnerDealId,
          ourDealId: deal.ourDealId,
          amount: deal.amount,
          status: deal.status,
          paymentMethod: deal.paymentMethod,
          clientIdentifier: deal.clientIdentifier,
          requisites: deal.requisites,
          createdAt: deal.createdAt,
          expiresAt: deal.expiresAt,
          metadata: deal.metadata
        }
      };
    }
  )

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  .post(
    "/deals/:partnerDealId/status",
    async ({ params, body, set }) => {
      const deal = deals.get(params.partnerDealId);
      
      if (!deal) {
        set.status = 404;
        return { error: 'Deal not found' };
      }

      deal.status = body.status;
      console.log(`üîÑ [MockAggregator] –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ ${params.partnerDealId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${body.status}`);
      
      return { success: true, status: deal.status };
    },
    {
      body: t.Object({
        status: t.String()
      })
    }
  )

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  .get("/deals", async () => {
    const allDeals = Array.from(deals.values());
    console.log(`üìä [MockAggregator] –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫: ${allDeals.length} —à—Ç.`);
    
    return {
      success: true,
      deals: allDeals,
      count: allDeals.length
    };
  })

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
  .get("/stats/clients", async () => {
    const allDeals = Array.from(deals.values());
    const clientStats = new Map<string, number>();

    allDeals.forEach(deal => {
      if (deal.clientIdentifier) {
        clientStats.set(deal.clientIdentifier, (clientStats.get(deal.clientIdentifier) || 0) + 1);
      }
    });

    const stats = Array.from(clientStats.entries()).map(([clientId, count]) => ({
      clientIdentifier: clientId,
      transactionCount: count,
      trafficType: count === 0 ? 'PRIMARY' : count >= 10 ? 'VIP' : 'SECONDARY'
    }));

    console.log('üìà [MockAggregator] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∑–∞–ø—Ä–æ—à–µ–Ω–∞');

    return {
      success: true,
      clientStats: stats,
      totalClients: stats.length,
      totalDeals: allDeals.length
    };
  })

  // Health check
  .get("/health", () => {
    return { 
      status: 'healthy', 
      service: 'Mock Aggregator',
      timestamp: new Date().toISOString(),
      dealsCount: deals.size
    };
  });

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–∫–æ–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...');
console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log(`   API –∫–ª—é—á: ${VALID_API_KEY}`);
console.log('   –ü–æ—Ä—Ç: 4000');
console.log('   –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
console.log('     POST /deals - –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏');
console.log('     GET  /deals/:id - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ');
console.log('     POST /deals/:id/status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞');
console.log('     GET  /deals - –í—Å–µ —Å–¥–µ–ª–∫–∏');
console.log('     GET  /stats/clients - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
console.log('     GET  /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');

mockAggregator.listen(4000, () => {
  console.log('\n‚úÖ –ú–æ–∫–æ–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000');
  console.log('üîó Base URL: http://localhost:4000');
  console.log('\nüìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
  console.log('   API –∫–ª—é—á: test-aggregator-api-key-123');
  console.log('   –ó–∞–≥–æ–ª–æ–≤–æ–∫: X-Api-Key: test-aggregator-api-key-123');
  console.log('\nüß™ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:');
  console.log('curl -X POST http://localhost:4000/deals \\');
  console.log('  -H "X-Api-Key: test-aggregator-api-key-123" \\');
  console.log('  -H "Content-Type: application/json" \\');
  console.log('  -d \'{"ourDealId":"test-123","status":"NEW","amount":5000,"merchantRate":95.5,"paymentMethod":"C2C","callbackUrl":"http://localhost:3000/api/aggregators/callback","clientIdentifier":"client_test_001"}\'');
});
