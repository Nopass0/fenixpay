/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏
 * 2. Callback'–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * 3. –†–∞—Å—á–µ—Ç—ã –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –∫–∞–∫ –≤ –æ–±—ã—á–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
 */

import { db } from "@/db";
import { Status } from "@prisma/client";
import { auctionSignatureUtils } from "@/utils/auction-signature";
import { CreateOrderRequest } from "@/types/auction";
import { sendTransactionCallbacks } from "@/utils/notify";
import { createServer } from "http";
import { truncate2 } from "@/utils/rounding";

class AuctionIntegrationFinalTester {
  private testServer: any = null;
  private receivedCallbacks: any[] = [];
  private serverPort = 3335;
  private merchantId = "";
  private privateKey = "";
  private externalSystemName = "test-auction-system";

  async startTestServer() {
    return new Promise<void>((resolve) => {
      this.testServer = createServer((req, res) => {
        if (req.method === 'POST') {
          let body = '';
          
          req.on('data', chunk => {
            body += chunk.toString();
          });
          
          req.on('end', () => {
            try {
              const callback = JSON.parse(body);
              console.log(`üì• [${req.url}] Callback:`, callback);
              console.log(`   Headers:`, req.headers['x-signature'] ? 'RSA –ø–æ–¥–ø–∏—Å—å –µ—Å—Ç—å' : '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏');
              
              this.receivedCallbacks.push({
                url: req.url,
                headers: req.headers,
                body: callback,
                timestamp: new Date(),
                hasSignature: !!req.headers['x-signature']
              });
              
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ status: 'received' }));
            } catch (error) {
              res.writeHead(400);
              res.end('Invalid JSON');
            }
          });
        } else {
          res.writeHead(404);
          res.end('Not Found');
        }
      });

      this.testServer.listen(this.serverPort, () => {
        console.log(`üåê –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.serverPort}`);
        resolve();
      });
    });
  }

  async stopTestServer() {
    if (this.testServer) {
      this.testServer.close();
      console.log("üõë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  async setupAuctionMerchant() {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...");

    const merchant = await db.merchant.findFirst({
      where: { name: "Test Auction Merchant" }
    });

    if (!merchant) {
      throw new Error("–ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ä—á–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    this.merchantId = merchant.id;
    this.privateKey = merchant.rsaPrivateKeyPem!;

    // –û–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è callback'–æ–≤
    await db.merchant.update({
      where: { id: merchant.id },
      data: { 
        auctionCallbackUrl: `http://localhost:${this.serverPort}/auction-callback`,
        auctionBaseUrl: `http://localhost:${this.serverPort}`
      }
    });

    console.log(`‚úÖ –ú–µ—Ä—á–∞–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å callback URL: http://localhost:${this.serverPort}/auction-callback`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ API
   */
  async createAuctionDeal() {
    console.log("\nüì° –°–æ–∑–¥–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ API...");

    const systemOrderId = `FINAL_TEST_${Date.now()}`;
    const timestamp = Math.floor(Date.now() / 1000);
    
    const request: CreateOrderRequest = {
      system_order_id: systemOrderId,
      currency: "USDT",
      max_exchange_rate: 97.5, // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å—á–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º
      max_commission: 3.0,
      amount: 10000, // 100 —Ä—É–±–ª–µ–π
      cancel_order_time_unix: timestamp + 600,
      stop_auction_time_unix: timestamp + 300,
      callback_url: `http://localhost:${this.serverPort}/merchant-callback`,
      allowed_payment_method: "sbp",
      iterative_sum_search_enabled: true
    };

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const canonicalString = auctionSignatureUtils.createCanonicalString(
      timestamp,
      this.externalSystemName,
      systemOrderId,
      "CreateOrder"
    );

    const signature = auctionSignatureUtils.signCanonicalString(canonicalString, this.privateKey);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch("http://localhost:3000/api/auction/external/CreateOrder", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Timestamp": timestamp.toString(),
        "X-Signature": signature,
      },
      body: JSON.stringify(request)
    });

    const result = await response.json();

    if (result.is_success) {
      console.log("‚úÖ –ê—É–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:");
      console.log(`   Order ID: ${result.external_order_id}`);
      console.log(`   –°—É–º–º–∞: ${result.amount}`);
      console.log(`   –ö—É—Ä—Å: ${result.exchange_rate}`);
      console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${result.commission}`);
      
      return {
        transactionId: result.external_order_id,
        systemOrderId,
        amount: result.amount,
        rate: result.exchange_rate
      };
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: ${result.error_message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—á–µ—Ç—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
   */
  async checkFreezingCalculations(transactionId: string) {
    console.log("\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏...");

    const transaction = await db.transaction.findFirst({
      where: { id: transactionId },
      include: {
        merchant: { select: { name: true, countInRubEquivalent: true } },
        trader: { select: { name: true, email: true, frozenUsdt: true, profitFromDeals: true } },
        method: { select: { name: true, code: true } },
        requisites: { select: { bankType: true, cardNumber: true } }
      }
    });

    if (!transaction) {
      throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    console.log("üìä –†–∞—Å—á–µ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏:");
    console.log(`   –°—É–º–º–∞: ${transaction.amount} RUB`);
    console.log(`   –ö—É—Ä—Å: ${transaction.rate}`);
    console.log(`   –ö—É—Ä—Å –º–µ—Ä—á–∞–Ω—Ç–∞: ${transaction.merchantRate || 'N/A'}`);
    console.log(`   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å: ${transaction.adjustedRate || 'N/A'}`);
    console.log(`   KKK –æ–ø–µ—Ä–∞—Ü–∏—è: ${transaction.kkkOperation || 'N/A'}`);
    console.log(`   KKK –ø—Ä–æ—Ü–µ–Ω—Ç: ${transaction.kkkPercent || 'N/A'}`);
    console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ USDT: ${transaction.frozenUsdtAmount || 0}`);
    console.log(`   –ö–æ–º–∏—Å—Å–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è: ${transaction.calculatedCommission || 'N/A'}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: ${transaction.feeInPercent || 'N/A'}`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞: ${transaction.traderProfit || 'N/A'}`);

    console.log("\nüë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞:");
    console.log(`   –ò–º—è: ${transaction.trader?.name}`);
    console.log(`   Email: ${transaction.trader?.email}`);
    console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ –≤—Å–µ–≥–æ: ${transaction.trader?.frozenUsdt} USDT`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å –æ—Ç —Å–¥–µ–ª–æ–∫: ${transaction.trader?.profitFromDeals} USDT`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—á–µ—Ç—ã –µ—Å—Ç—å
    const hasCalculations = transaction.frozenUsdtAmount && transaction.calculatedCommission && transaction.adjustedRate;
    
    if (hasCalculations) {
      console.log("‚úÖ –†–∞—Å—á–µ—Ç—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    } else {
      console.log("‚ùå –†–∞—Å—á–µ—Ç—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏ –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    }

    return { transaction, hasCalculations };
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–º
   */
  async simulateTraderConfirmation(transactionId: string) {
    console.log("\nüë§ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–º...");

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
    const transaction = await db.transaction.findFirst({
      where: { id: transactionId },
      include: { trader: true }
    });

    if (!transaction || !transaction.trader) {
      throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }

    const traderBalanceBefore = transaction.trader.frozenUsdt;
    const profitBefore = transaction.trader.profitFromDeals;

    console.log(`üìä –î–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`);
    console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${traderBalanceBefore} USDT`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å: ${profitBefore} USDT`);

    // –û—á–∏—â–∞–µ–º callback'–∏
    this.receivedCallbacks = [];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ READY –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä
    await db.$transaction(async (prisma) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await prisma.transaction.update({
        where: { id: transactionId },
        data: { 
          status: Status.READY,
          acceptedAt: new Date()
        }
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –∏ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∫–∞–∫ –≤ –æ–±—ã—á–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
      if (transaction.frozenUsdtAmount) {
        // –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await prisma.user.update({
          where: { id: transaction.traderId! },
          data: {
            frozenUsdt: {
              decrement: truncate2(transaction.frozenUsdtAmount),
            },
          },
        });

        // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å —Ç—Ä–µ–π–¥–µ—Ä—É
        if (transaction.traderProfit) {
          await prisma.user.update({
            where: { id: transaction.traderId! },
            data: {
              profitFromDeals: {
                increment: truncate2(transaction.traderProfit),
              },
            },
          });
        }
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –º–µ—Ä—á–∞–Ω—Ç—É
      if (transaction.rate) {
        const netAmount = transaction.amount - (transaction.amount * (transaction.method?.commissionPayin || 0) / 100);
        const merchantCredit = netAmount / transaction.rate;
        
        await prisma.merchant.update({
          where: { id: transaction.merchantId },
          data: {
            balanceUsdt: { increment: truncate2(merchantCredit) },
          },
        });
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback'–∏
    const updatedTransaction = await db.transaction.findFirst({
      where: { id: transactionId },
      include: {
        merchant: true,
        method: true,
        trader: true,
        requisites: true,
      }
    });

    if (updatedTransaction) {
      await sendTransactionCallbacks(updatedTransaction);
    }

    // –ñ–¥–µ–º callback'–∏
    await new Promise(resolve => setTimeout(resolve, 1500));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const traderAfter = await db.user.findFirst({
      where: { id: transaction.traderId! },
      select: { frozenUsdt: true, profitFromDeals: true }
    });

    console.log(`üìä –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`);
    console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${traderAfter?.frozenUsdt} USDT (–±—ã–ª–æ ${traderBalanceBefore})`);
    console.log(`   –ü—Ä–∏–±—ã–ª—å: ${traderAfter?.profitFromDeals} USDT (–±—ã–ª–æ ${profitBefore})`);

    const unfrozenAmount = traderBalanceBefore - (traderAfter?.frozenUsdt || 0);
    const profitIncrease = (traderAfter?.profitFromDeals || 0) - profitBefore;

    console.log(`üí∏ –†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ: ${unfrozenAmount} USDT`);
    console.log(`üí∞ –ü—Ä–∏–±—ã–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞: ${profitIncrease} USDT`);

    return {
      unfrozenAmount,
      profitIncrease,
      callbacksReceived: this.receivedCallbacks.length
    };
  }

  /**
   * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  async runFullIntegrationTest() {
    console.log("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–£–ö–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´");
    console.log("=".repeat(70));

    try {
      // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
      await this.startTestServer();
      await this.setupAuctionMerchant();

      // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
      const deal = await this.createAuctionDeal();

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞–º–æ—Ä–æ–∑–∫–∏
      const { transaction, hasCalculations } = await this.checkFreezingCalculations(deal.transactionId);

      // 4. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–º
      const confirmation = await this.simulateTraderConfirmation(deal.transactionId);

      // 5. –ê–Ω–∞–ª–∏–∑ callback'–æ–≤
      console.log(`\nüìû –ê–Ω–∞–ª–∏–∑ callback'–æ–≤:`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${confirmation.callbacksReceived}`);
      
      let auctionCallbacks = 0;
      let merchantCallbacks = 0;

      this.receivedCallbacks.forEach((cb, index) => {
        if (cb.body.order_id && cb.hasSignature) {
          console.log(`   ${index + 1}. –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π callback: status_id=${cb.body.status_id}`);
          auctionCallbacks++;
        } else {
          console.log(`   ${index + 1}. –ú–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–π callback: status=${cb.body.status}`);
          merchantCallbacks++;
        }
      });

      // 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
      console.log("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:");
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: ${deal ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
      console.log(`‚úÖ –†–∞—Å—á–µ—Ç—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏: ${hasCalculations ? '–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '–ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã'}`);
      console.log(`‚úÖ –†–∞–∑–º–æ—Ä–æ–∑–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤: ${confirmation.unfrozenAmount > 0 ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
      console.log(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏: ${confirmation.profitIncrease > 0 ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
      console.log(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–µ callback'–∏: ${auctionCallbacks > 0 ? '—Ä–∞–±–æ—Ç–∞—é—Ç' : '–ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç'}`);
      console.log(`‚úÖ –ú–µ—Ä—á–∞–Ω—Ç—Å–∫–∏–µ callback'–∏: ${merchantCallbacks > 0 ? '—Ä–∞–±–æ—Ç–∞—é—Ç' : '–ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç'}`);

      const allWorking = deal && hasCalculations && confirmation.unfrozenAmount > 0 && 
                        confirmation.profitIncrease > 0 && auctionCallbacks > 0 && merchantCallbacks > 0;

      if (allWorking) {
        console.log("\nüéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ù–ê 100%!");
        console.log("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!");
      } else {
        console.log("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è");
      }

      return {
        success: allWorking,
        stats: {
          dealCreated: !!deal,
          calculationsIntegrated: hasCalculations,
          unfrozenAmount: confirmation.unfrozenAmount,
          profitIncrease: confirmation.profitIncrease,
          auctionCallbacks,
          merchantCallbacks,
          totalCallbacks: confirmation.callbacksReceived
        }
      };

    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:", error);
      return { success: false, error };
    } finally {
      await this.stopTestServer();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new AuctionIntegrationFinalTester();
  const result = await tester.runFullIntegrationTest();
  
  console.log("\n" + "=".repeat(70));
  console.log(`üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${result.success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
  
  if (result.success) {
    console.log("üéä –ê—É–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
  } else {
    console.log("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
  }
  
  process.exit(result.success ? 0 : 1);
}

if (require.main === module) {
  main().catch(console.error);
}

export { AuctionIntegrationFinalTester };
