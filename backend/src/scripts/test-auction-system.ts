/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import { db } from "@/db";
import { auctionRSAKeyGenerator, auctionSignatureUtils } from "@/utils/auction-signature";
import { auctionIntegrationService } from "@/services/auction-integration.service";
import { auctionCallbackHandler } from "@/services/auction-callback-handler";

async function main() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã");
  console.log("=" .repeat(50));

  try {
    // 1. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
    console.log("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSA –∫–ª—é—á–µ–π...");
    const keyPair = await auctionRSAKeyGenerator.generateKeyPair();
    console.log("‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    
    const isValid = auctionRSAKeyGenerator.validateKeyPair(
      keyPair.publicKeyPem,
      keyPair.privateKeyPem
    );
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π: ${isValid ? "–ü–†–û–ô–î–ï–ù–ê" : "–ü–†–û–í–ê–õ–ï–ù–ê"}`);

    // 2. –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏
    console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
    const testString = "test-canonical-string-" + Date.now();
    const signature = auctionSignatureUtils.signCanonicalString(testString, keyPair.privateKeyPem);
    const verificationResult = auctionSignatureUtils.verifySignature(
      testString,
      signature,
      keyPair.publicKeyPem
    );
    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å—å –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${verificationResult ? "–ü–†–û–ô–î–ï–ù–ê" : "–ü–†–û–í–ê–õ–ï–ù–ê"}`);

    // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    console.log("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç
    let testMerchant = await db.merchant.findFirst({
      where: { name: "Test Auction Merchant" }
    });

    if (!testMerchant) {
      testMerchant = await db.merchant.create({
        data: {
          name: "Test Auction Merchant",
          token: `test-auction-${Date.now()}`,
          isAuctionEnabled: true,
          auctionBaseUrl: "https://test-auction-api.example.com",
          rsaPublicKeyPem: keyPair.publicKeyPem,
          rsaPrivateKeyPem: keyPair.privateKeyPem,
          externalSystemName: "test-auction-system",
          keysGeneratedAt: new Date(),
        }
      });
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${testMerchant.id}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
      testMerchant = await db.merchant.update({
        where: { id: testMerchant.id },
        data: {
          isAuctionEnabled: true,
          auctionBaseUrl: "https://test-auction-api.example.com",
          rsaPublicKeyPem: keyPair.publicKeyPem,
          rsaPrivateKeyPem: keyPair.privateKeyPem,
          externalSystemName: "test-auction-system",
          keysGeneratedAt: new Date(),
        }
      });
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${testMerchant.id}`);
    }

    // 4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    console.log("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...");
    const isAuctionMerchant = await auctionIntegrationService.isAuctionMerchant(testMerchant.id);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞: ${isAuctionMerchant ? "–ü–†–û–ô–î–ï–ù–ê" : "–ü–†–û–í–ê–õ–ï–ù–ê"}`);

    const auctionConfig = await auctionIntegrationService.getAuctionMerchantConfig(testMerchant.id);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${auctionConfig ? "–ü–†–û–ô–î–ï–ù–ê" : "–ü–†–û–í–ê–õ–ï–ù–ê"}`);

    // 5. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callback
    console.log("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callback...");
    const timestamp = Math.floor(Date.now() / 1000);
    const orderId = "test-order-" + Date.now();
    const callbackBody = {
      order_id: orderId,
      status_id: 6,
      amount: 1000
    };

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
    const canonicalString = `${timestamp}|test-auction-system|${orderId}|AuctionCallback`;
    const callbackSignature = auctionSignatureUtils.signCanonicalString(
      canonicalString,
      keyPair.privateKeyPem
    );

    const callbackHeaders = {
      "X-Timestamp": timestamp.toString(),
      "X-Signature": callbackSignature,
    };

    const callbackValidation = auctionCallbackHandler.validateCallbackSignature(
      auctionConfig!,
      callbackHeaders,
      callbackBody
    );
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è callback: ${callbackValidation ? "–ü–†–û–ô–î–ï–ù–ê" : "–ü–†–û–í–ê–õ–ï–ù–ê"}`);

    // 6. –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
    console.log("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω...");
    const currentTime = Math.floor(Date.now() / 1000);
    const validTime1 = auctionSignatureUtils.validateTimestamp(currentTime);
    const validTime2 = auctionSignatureUtils.validateTimestamp(currentTime - 60); // 1 –º–∏–Ω—É—Ç–∞ –Ω–∞–∑–∞–¥
    const invalidTime = auctionSignatureUtils.validateTimestamp(currentTime - 200); // 200 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥

    console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${validTime1 ? "–í–ê–õ–ò–î–ù–û" : "–ù–ï–í–ê–õ–ò–î–ù–û"}`);
    console.log(`‚úÖ –í—Ä–µ–º—è -60 —Å–µ–∫: ${validTime2 ? "–í–ê–õ–ò–î–ù–û" : "–ù–ï–í–ê–õ–ò–î–ù–û"}`);
    console.log(`‚úÖ –í—Ä–µ–º—è -200 —Å–µ–∫: ${invalidTime ? "–í–ê–õ–ò–î–ù–û" : "–ù–ï–í–ê–õ–ò–î–ù–û"} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ)`);

    // 7. –¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    console.log("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...");
    const statusMappings = [
      { auction: 1, expected: "CREATED" },
      { auction: 6, expected: "READY" },
      { auction: 8, expected: "EXPIRED" },
      { auction: 9, expected: "CANCELED" },
    ];

    statusMappings.forEach(({ auction, expected }) => {
      console.log(`   –ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${auction} ‚Üí ${expected}`);
    });

    // 8. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log("\n8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    const shouldCleanup = process.argv.includes("--cleanup");
    
    if (shouldCleanup) {
      await db.merchant.delete({
        where: { id: testMerchant.id }
      });
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç —É–¥–∞–ª–µ–Ω");
    } else {
      console.log("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --cleanup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)");
      console.log(`   ID –º–µ—Ä—á–∞–Ω—Ç–∞: ${testMerchant.id}`);
    }

    console.log("\n" + "=".repeat(50));
    console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    console.log("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:");
    console.log("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è RSA –∫–ª—é—á–µ–π");
    console.log("   ‚úÖ –ü–æ–¥–ø–∏—Å—å –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π");
    console.log("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞");
    console.log("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ—Ä—á–∞–Ω—Ç–∞");
    console.log("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è callback –ø–æ–¥–ø–∏—Å–µ–π");
    console.log("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
    console.log("   ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤");

    console.log("\nüîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:");
    console.log("   - –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã: /api/admin/auction/*");
    console.log("   - Callback —Ä–æ—É—Ç—ã: /api/auction/callback/:merchantId");
    console.log("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏");

  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.main) {
  main().catch(console.error);
}
