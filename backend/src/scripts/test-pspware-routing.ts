#!/usr/bin/env bun
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
 * –∫–æ–≥–¥–∞ —É –º–µ—Ä—á–∞–Ω—Ç–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
 */

import { db } from "@/db";
import { AggregatorApiSchema, PSPWareRandomizationType } from "@prisma/client";
import axios from "axios";

const API_URL = process.env.API_URL || "http://localhost:3000/api";

async function testPSPWareRouting() {
  console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...\n");

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞
    console.log("1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞...");
    let merchant = await db.merchant.findFirst({
      where: { name: "Test Merchant for PSPWare" }
    });

    if (!merchant) {
      merchant = await db.merchant.create({
        data: {
          name: "Test Merchant for PSPWare",
          token: "test-merchant-token-pspware-" + Date.now(),
          apiKeyPublic: "test-merchant-api-key-pspware",
          apiKeyPrivate: "test-merchant-private-key-pspware",
          disabled: false,
          balanceUsdt: 1000
        }
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç");
    } else {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞");
    }

    // 2. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –º–µ—Ä—á–∞–Ω—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    console.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã...");
    let method = await db.method.findFirst({
      where: {
        merchantId: merchant.id,
        type: "sbp",
        isActive: true
      }
    });

    if (!method) {
      method = await db.method.create({
        data: {
          merchantId: merchant.id,
          name: "–°–ë–ü",
          code: "sbp",
          type: "sbp",
          currency: "RUB",
          isActive: true,
          showOnMain: true,
          minPayin: 100,
          maxPayin: 300000,
          commissionPayin: 2.5
        }
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –°–ë–ü");
    } else {
      console.log("‚úÖ –ú–µ—Ç–æ–¥ –°–ë–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    console.log("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...");
    let pspwareAggregator = await db.aggregator.findFirst({
      where: {
        apiSchema: AggregatorApiSchema.PSPWARE,
        isActive: true
      }
    });

    if (!pspwareAggregator) {
      console.log("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä...");
      pspwareAggregator = await db.aggregator.create({
        data: {
          email: "pspware-test@example.com",
          name: "PSPWare Test Aggregator",
          password: "hashedpassword",
          apiToken: "pspware-api-token-" + Date.now(),
          callbackToken: "pspware-callback-token-" + Date.now(),
          apiBaseUrl: "http://localhost:4002", // –ú–æ–∫ —Å–µ—Ä–≤–µ—Ä PSPWare
          apiSchema: AggregatorApiSchema.PSPWARE,
          pspwareApiKey: "test-pspware-key-123",
          enableRandomization: true,
          randomizationType: PSPWareRandomizationType.PARTIAL,
          isActive: true,
          balanceUsdt: 10000,
          priority: 1,
          minBalance: 100,
          maxSlaMs: 5000
        }
      });
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä");
    } else {
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: ${pspwareAggregator.name}`);
    }

    // 4. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∫–∞ –ø–æ—à–ª–∞ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
    console.log("\n4Ô∏è‚É£ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback...");
    await db.user.updateMany({
      where: { role: "trader" },
      data: { banned: true }
    });
    console.log("‚úÖ –í—Å–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞");

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ API –º–µ—Ä—á–∞–Ω—Ç–∞
    console.log("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏...");
    const dealRequest = {
      amount: 1500, // –ö—Ä–∞—Ç–Ω–æ 500 –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
      orderId: `test-pspware-${Date.now()}`,
      clientIdentifier: "test-client-123",
      userIp: "192.168.1.100",
      callbackUri: `${API_URL}/test/callback`,
      rate: 96.5
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:");
    console.log(JSON.stringify(dealRequest, null, 2));

    try {
      const response = await axios.post(
        `${API_URL}/merchant/in`,
        dealRequest,
        {
          headers: {
            "Content-Type": "application/json",
            "x-api-key": merchant.apiKeyPublic || "test-merchant-api-key-pspware"
          },
          timeout: 10000
        }
      );

      console.log("\n‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
      console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã:");
      console.log(JSON.stringify(response.data, null, 2));

      if (response.data.data) {
        const transaction = response.data.data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à–ª–∞ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        const dbTransaction = await db.transaction.findUnique({
          where: { id: transaction.id },
          include: {
            aggregator: true
          }
        });

        if (dbTransaction?.aggregator) {
          console.log(`\nüéØ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞: ${dbTransaction.aggregator.name}`);
          console.log(`   API Schema: ${dbTransaction.aggregator.apiSchema}`);
          
          if (dbTransaction.aggregator.apiSchema === AggregatorApiSchema.PSPWARE) {
            console.log("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PSPWare API —Å—Ö–µ–º–∞!");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            const integrationLogs = await db.aggregatorIntegrationLog.findMany({
              where: {
                aggregatorId: dbTransaction.aggregator.id,
                ourDealId: dealRequest.orderId
              },
              orderBy: { createdAt: 'desc' },
              take: 5
            });

            if (integrationLogs.length > 0) {
              console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${integrationLogs.length} –ª–æ–≥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:`);
              integrationLogs.forEach(log => {
                console.log(`   - ${log.eventType}: ${log.method} ${log.url}`);
                console.log(`     Status: ${log.statusCode}, Response time: ${log.responseTimeMs}ms`);
                if (log.error) {
                  console.log(`     ‚ùå Error: ${log.error}`);
                }
              });
            }
          }
        } else {
          console.log("\n‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞");
        }
      }

    } catch (error: any) {
      if (error.response) {
        console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:");
        console.error(`   Status: ${error.response.status}`);
        console.error(`   Data: ${JSON.stringify(error.response.data, null, 2)}`);
        
        if (error.response.data?.error === "NO_REQUISITE") {
          console.log("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω NO_REQUISITE - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:");
          console.log("   1. –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ PSPWare –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä");
          console.log("   2. –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ apiBaseUrl –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞");
          console.log("   3. –î–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –ª–∏ –±–∞–ª–∞–Ω—Å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞");
          console.log("   4. –ó–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–∫-—Å–µ—Ä–≤–µ—Ä PSPWare –Ω–∞ –ø–æ—Ä—Ç—É 4002");
        }
      } else {
        console.error("\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error.message);
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
    console.log("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...");
    const activeAggregators = await db.aggregator.findMany({
      where: {
        isActive: true,
        apiBaseUrl: { not: null }
      },
      orderBy: { priority: 'asc' }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${activeAggregators.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤:`);
    activeAggregators.forEach(agg => {
      console.log(`   - ${agg.name} (${agg.apiSchema})`);
      console.log(`     URL: ${agg.apiBaseUrl}`);
      console.log(`     Priority: ${agg.priority}, Balance: ${agg.balanceUsdt} USDT`);
      if (agg.apiSchema === AggregatorApiSchema.PSPWARE) {
        console.log(`     PSPWare Key: ${agg.pspwareApiKey ? '‚úÖ Configured' : '‚ùå Not configured'}`);
        console.log(`     Randomization: ${agg.enableRandomization ? `‚úÖ ${agg.randomizationType}` : '‚ùå Disabled'}`);
      }
    });

  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    console.log("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...");
    await db.user.updateMany({
      where: { role: "trader" },
      data: { banned: false }
    });
    console.log("‚úÖ –¢—Ä–µ–π–¥–µ—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã");
  }

  console.log("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPSPWareRouting().catch(console.error);