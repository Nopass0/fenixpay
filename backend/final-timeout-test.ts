import axios from 'axios';

async function finalTimeoutTest() {
  try {
    console.log("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è domainchsp.ru...");
    
    const testRequest = {
      rate: 82,
      amount: 5009,
      userIp: "127.0.0.1",
      orderId: `FINAL_TEST_${Date.now()}`,
      methodId: "cmed74minz06uoc01cjqllr6p",
      expired_at: new Date(Date.now() + 30 * 60 * 1000).toISOString(),
      callbackUri: "https://chasepay.pro/api/aggregator/callback",
      clientIdentifier: "client_user_12345"
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
    console.log(JSON.stringify(testRequest, null, 2));

    const startTime = Date.now();
    
    const response = await axios.post('https://domainchsp.ru/api/merchant/transactions/in', testRequest, {
      headers: {
        'Content-Type': 'application/json',
        'x-merchant-api-key': '64f8c5b37107d437f778b6037cf4a002d068edd7197108efcd5c53961211bfd0'
      },
      timeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
      validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
    });

    const responseTime = Date.now() - startTime;

    console.log("");
    console.log("üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:");
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(response.data, null, 2));

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (responseTime > 2000) {
      console.log("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 2000ms, –Ω–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç–∞–π–º–∞—É—Ç–∏—Ç—Å—è");
    } else {
      console.log("‚ö†Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ 2000ms");
    }

    if (response.status === 200 || response.status === 201) {
      console.log("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!");
    } else if (response.status === 400 && response.data?.error?.includes('timeout')) {
      console.log("‚ùå –í—Å–µ –µ—â–µ –ø–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ—à–∏–±–∫—É");
    } else {
      console.log("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –Ω–æ –Ω–µ —Ç–∞–π–º–∞—É—Ç–æ–º");
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log("\nüìä –ê–Ω–∞–ª–∏–∑:");
    console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${response.status === 200 || response.status === 201}`);
    console.log(`   –¢–∞–π–º–∞—É—Ç –æ—à–∏–±–∫–∞: ${response.data?.error?.includes('timeout') || false}`);

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
    
    if (error.code === 'ECONNABORTED') {
      console.log("‚è∞ –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)");
    } else if (error.response) {
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${error.response.status}`);
      console.log("üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", JSON.stringify(error.response.data, null, 2));
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
finalTimeoutTest();
