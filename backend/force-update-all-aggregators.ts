import { db } from "@/db";

async function forceUpdateAllAggregators() {
  try {
    console.log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...");
    
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    console.log("\n1Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏...");
    const shortTimeoutAggregators = await db.aggregator.findMany({
      where: {
        maxSlaMs: { lte: 2000 }
      },
      select: {
        id: true,
        name: true,
        maxSlaMs: true,
        isActive: true
      }
    });

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${shortTimeoutAggregators.length} –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏`);
    
    for (const agg of shortTimeoutAggregators) {
      const newTimeout = 5000;
      await db.aggregator.update({
        where: { id: agg.id },
        data: { maxSlaMs: newTimeout }
      });
      console.log(`   ‚úÖ ${agg.name}: ${agg.maxSlaMs}ms ‚Üí ${newTimeout}ms (${agg.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`);
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–æ –º–∏–Ω–∏–º—É–º 5000ms
    console.log("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...");
    const activeAggregators = await db.aggregator.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        maxSlaMs: true
      }
    });

    for (const agg of activeAggregators) {
      if (agg.maxSlaMs < 5000) {
        await db.aggregator.update({
          where: { id: agg.id },
          data: { maxSlaMs: 5000 }
        });
        console.log(`   ‚úÖ ${agg.name}: ${agg.maxSlaMs}ms ‚Üí 5000ms`);
      } else {
        console.log(`   ‚úÖ ${agg.name}: ${agg.maxSlaMs}ms (—É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)`);
      }
    }

    // 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä domainchsp.ru
    console.log("\n3Ô∏è‚É£ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ domainchsp.ru...");
    const domainChspAggregators = await db.aggregator.findMany({
      where: {
        OR: [
          { apiBaseUrl: { contains: "domainchsp.ru" } },
          { name: { contains: "chsp" } }
        ]
      }
    });

    for (const agg of domainChspAggregators) {
      const newTimeout = 10000; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—â–µ –±–æ–ª—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      await db.aggregator.update({
        where: { id: agg.id },
        data: { 
          maxSlaMs: newTimeout,
          updatedAt: new Date() // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        }
      });
      console.log(`   ‚úÖ ${agg.name}: ${agg.maxSlaMs}ms ‚Üí ${newTimeout}ms (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è)`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log("\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:");
    const finalCheck = await db.aggregator.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true,
        updatedAt: true
      },
      orderBy: { maxSlaMs: 'asc' }
    });

    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤: ${finalCheck.length}`);
    finalCheck.forEach(agg => {
      console.log(`   - ${agg.name}: ${agg.maxSlaMs}ms (–æ–±–Ω–æ–≤–ª–µ–Ω: ${agg.updatedAt})`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å domainchsp.ru
    console.log("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å domainchsp.ru:");
    const domainChspFinal = await db.aggregator.findMany({
      where: {
        OR: [
          { apiBaseUrl: { contains: "domainchsp.ru" } },
          { name: { contains: "chsp" } }
        ]
      },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true,
        updatedAt: true
      }
    });

    domainChspFinal.forEach(agg => {
      console.log(`   - ${agg.name}: ${agg.maxSlaMs}ms (–∞–∫—Ç–∏–≤–µ–Ω: ${agg.isActive}, –æ–±–Ω–æ–≤–ª–µ–Ω: ${agg.updatedAt})`);
    });

    console.log("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    console.log("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ");
    console.log("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö");
    console.log("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤:", error);
  } finally {
    await db.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
forceUpdateAllAggregators();
