import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();

async function testApiEndpoint() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
    const aggregator1 = await db.aggregator.create({
      data: {
        email: `api-test1-${Date.now()}@example.com`,
        password: 'test123',
        name: 'API Test Aggregator 1',
        apiToken: `api-token-1-${Date.now()}`,
        callbackToken: `callback-token-1-${Date.now()}`,
      }
    });
    
    const aggregator2 = await db.aggregator.create({
      data: {
        email: `api-test2-${Date.now()}@example.com`,
        password: 'test123',
        name: 'API Test Aggregator 2',
        apiToken: `api-token-2-${Date.now()}`,
        callbackToken: `callback-token-2-${Date.now()}`,
      }
    });
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // –ü–æ–ª—É—á–∞–µ–º admin key (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –±–∞–∑–µ)
    const admin = await db.admin.findFirst();
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    const adminKey = admin.key;
    const sharedToken = `api-shared-token-${Date.now()}`;
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
    const response1 = await fetch(`http://localhost:3000/api/admin/aggregators/${aggregator1.id}/custom-token`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-admin-key': adminKey,
      },
      body: JSON.stringify({
        customApiToken: sharedToken
      })
    });
    
    if (response1.ok) {
      console.log('‚úÖ –ü–µ—Ä–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      const error1 = await response1.text();
      console.log('‚ùå –ü–µ—Ä–≤—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: –æ—à–∏–±–∫–∞', response1.status, error1);
    }
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
    const response2 = await fetch(`http://localhost:3000/api/admin/aggregators/${aggregator2.id}/custom-token`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'x-admin-key': adminKey,
      },
      body: JSON.stringify({
        customApiToken: sharedToken
      })
    });
    
    if (response2.ok) {
      console.log('‚úÖ –í—Ç–æ—Ä–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üéâ API –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –û–¥–∏–Ω —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ API!');
    } else {
      const error2 = await response2.text();
      console.log('‚ùå –í—Ç–æ—Ä–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: –æ—à–∏–±–∫–∞', response2.status, error2);
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await db.aggregator.deleteMany({
      where: {
        id: { in: [aggregator1.id, aggregator2.id] }
      }
    });
    
    console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  } finally {
    await db.$disconnect();
  }
}

testApiEndpoint();
