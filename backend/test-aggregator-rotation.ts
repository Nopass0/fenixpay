#!/usr/bin/env bun

import { db } from './src/db';

async function main() {
  console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏...\n');

  // –û–±–Ω–æ–≤–ª—è–µ–º PSPware - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
  const pspware = await db.aggregator.update({
    where: { id: 'cmfcjbips0r40iktfxhlaktxm' }, // PSPware ID
    data: {
      isActive: true,
      priority: 10,
      depositUsdt: 0, // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç
      balanceUsdt: 50000,
      requiresInsuranceDeposit: false,
      minBalance: 0
    }
  });
  console.log(`‚úÖ PSPware: priority=${pspware.priority}, requiresInsurance=${pspware.requiresInsuranceDeposit}, balance=${pspware.balanceUsdt}`);

  // –û–±–Ω–æ–≤–ª—è–µ–º Test Aggregator - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  const testAgg = await db.aggregator.update({
    where: { id: 'cmfcue3ww0000ikn5tq50b8bg' }, // Test Aggregator ID
    data: {
      isActive: true,
      priority: 5,
      depositUsdt: 2000,
      balanceUsdt: 10000,
      requiresInsuranceDeposit: true,
      minBalance: 0
    }
  });
  console.log(`‚úÖ Test Aggregator: priority=${testAgg.priority}, requiresInsurance=${testAgg.requiresInsuranceDeposit}, deposit=${testAgg.depositUsdt}, balance=${testAgg.balanceUsdt}`);

  // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç
  let merchant = await db.merchant.findFirst({
    where: { name: 'Test Merchant PSPWare' }
  });
  
  if (!merchant) {
    merchant = await db.merchant.create({
      data: {
        name: 'Test Merchant PSPWare',
        email: 'test-pspware@merchant.com',
        password: '$2a$10$1234567890abcdefghijk', // —Ö—ç—à –ø–∞—Ä–æ–ª—è
        apiKey: 'test-merchant-api-key-' + Date.now(),
        disabled: false,
        countInRubEquivalent: true
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–µ—Ä—á–∞–Ω—Ç: ${merchant.name}`);
  } else {
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ä—á–∞–Ω—Ç: ${merchant.name}`);
  }

  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ SBP
  const method = await db.method.findFirst({
    where: { code: 'sbp' }
  });

  if (!method) {
    console.error('‚ùå –ú–µ—Ç–æ–¥ SBP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    process.exit(1);
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –º–µ—Ä—á–∞–Ω—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥—É
  await db.merchantMethod.upsert({
    where: {
      merchantId_methodId: {
        merchantId: merchant.id,
        methodId: method.id
      }
    },
    create: {
      merchantId: merchant.id,
      methodId: method.id,
      isEnabled: true
    },
    update: {
      isEnabled: true
    }
  });

  console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤:');
  const aggregators = await db.aggregator.findMany({
    where: { isActive: true },
    orderBy: [
      { priority: 'desc' },
      { updatedAt: 'asc' }
    ],
    select: {
      name: true,
      priority: true,
      isActive: true,
      balanceUsdt: true,
      depositUsdt: true,
      requiresInsuranceDeposit: true,
      apiBaseUrl: true
    }
  });

  aggregators.forEach(agg => {
    console.log(`- ${agg.name}: priority=${agg.priority}, balance=${agg.balanceUsdt}, deposit=${agg.depositUsdt}, requiresInsurance=${agg.requiresInsuranceDeposit}`);
  });

  console.log(`\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`\nüöÄ –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ API:`);
  console.log(`curl -X POST http://localhost:3000/api/merchant/transactions/in \\
  -H "x-merchant-api-key: ${merchant.apiKey}" \\
  -H "Content-Type: application/json" \\
  -d '{
    "orderId": "test-rotation-${Date.now()}",
    "amount": 1000,
    "methodId": "${method.id}",
    "userIp": "192.168.1.1",
    "callbackUri": "https://example.com/callback"
  }'`);

  process.exit(0);
}

main().catch(console.error);