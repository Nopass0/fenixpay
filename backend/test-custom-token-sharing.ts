import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();

async function testCustomTokenSharing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
    const aggregator1 = await db.aggregator.create({
      data: {
        email: `test1-${Date.now()}@example.com`,
        password: 'test123',
        name: 'Test Aggregator 1',
        apiToken: `api-token-1-${Date.now()}`,
        callbackToken: `callback-token-1-${Date.now()}`,
      }
    });
    
    const aggregator2 = await db.aggregator.create({
      data: {
        email: `test2-${Date.now()}@example.com`,
        password: 'test123',
        name: 'Test Aggregator 2',
        apiToken: `api-token-2-${Date.now()}`,
        callbackToken: `callback-token-2-${Date.now()}`,
      }
    });
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã:', { 
      id1: aggregator1.id, 
      id2: aggregator2.id 
    });
    
    // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ customApiToken –¥–ª—è –æ–±–æ–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
    const sharedToken = `shared-token-${Date.now()}`;
    
    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...');
    const updated1 = await db.aggregator.update({
      where: { id: aggregator1.id },
      data: { customApiToken: sharedToken }
    });
    
    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞...');
    const updated2 = await db.aggregator.update({
      where: { id: aggregator2.id },
      data: { customApiToken: sharedToken }
    });
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–±–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω:');
    console.log(`   –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä 1 (${updated1.id}): ${updated1.customApiToken}`);
    console.log(`   –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä 2 (${updated2.id}): ${updated2.customApiToken}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    if (updated1.customApiToken === updated2.customApiToken && updated1.customApiToken === sharedToken) {
      console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –û–¥–∏–Ω —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º–∏!');
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢–æ–∫–µ–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await db.aggregator.deleteMany({
      where: {
        id: { in: [aggregator1.id, aggregator2.id] }
      }
    });
    
    console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await db.$disconnect();
  }
}

testCustomTokenSharing();
