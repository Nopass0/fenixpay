// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ methodId

async function testFinalMethodIdFix() {
  try {
    console.log(
      "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ methodId –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...\n"
    );

    const response = await fetch(
      "http://localhost:3000/api/merchant/transactions/in",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-merchant-api-key":
            "b00607ffee5f95a41906214e87aa282f8de37289a9e2a537a16821a2f2729bc4",
        },
        body: JSON.stringify({
          orderId: `test_order_${Date.now()}`,
          rate: 84,
          amount: 5000,
          methodId: "cmfjsx514040otozcsg3tum7x",
          expired_at: new Date(Date.now() + 30 * 60 * 1000).toISOString(),
          isMock: false,
        }),
      }
    );

    const data = await response.json();

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:");
    console.log("Status:", response.status);
    console.log("Response:", JSON.stringify(data, null, 2));

    if (response.status === 200 || response.status === 201) {
      console.log("\n‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
      if (data.requisites) {
        console.log("üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:", data.requisites);
      }
    } else if (data.error === "NO_REQUISITE") {
      console.log(
        "\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
      );
    } else if (data.error === "methodId is not defined") {
      console.log(
        "\n‚ùå –û—à–∏–±–∫–∞ methodId –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"
      );
    } else {
      console.log("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:", data.error);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

testFinalMethodIdFix();
