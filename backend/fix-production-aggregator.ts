import { db } from "@/db";

async function fixProductionAggregator() {
  try {
    console.log("üîç –ü–æ–∏—Å–∫ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å API –∫–ª—é—á–æ–º 64f8c5b3...");
    
    // –ò—â–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø–æ API –∫–ª—é—á—É
    const aggregator = await db.aggregator.findFirst({
      where: {
        OR: [
          { apiToken: { contains: "64f8c5b3" } },
          { customApiToken: { contains: "64f8c5b3" } }
        ]
      }
    });

    if (!aggregator) {
      console.log("‚ùå –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä —Å API –∫–ª—é—á–æ–º 64f8c5b3... –Ω–µ –Ω–∞–π–¥–µ–Ω");
      
      // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
      const allAggregators = await db.aggregator.findMany({
        select: {
          id: true,
          name: true,
          email: true,
          apiBaseUrl: true,
          maxSlaMs: true,
          isActive: true,
          apiToken: true,
          customApiToken: true
        }
      });
      
      console.log("üìã –í—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –≤ –±–∞–∑–µ:");
      allAggregators.forEach(agg => {
        const apiKey = agg.customApiToken || agg.apiToken;
        const maskedKey = apiKey ? `${apiKey.substring(0, 8)}...` : 'N/A';
        console.log(`  - ${agg.name} (${agg.email}) - ${agg.apiBaseUrl} - ${agg.maxSlaMs}ms - ${agg.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'} - API: ${maskedKey}`);
      });
      
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä: ${aggregator.name}`);
    console.log(`   ID: ${aggregator.id}`);
    console.log(`   Email: ${aggregator.email}`);
    console.log(`   API URL: ${aggregator.apiBaseUrl}`);
    console.log(`   –¢–µ–∫—É—â–∏–π —Ç–∞–π–º–∞—É—Ç: ${aggregator.maxSlaMs}ms`);
    console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${aggregator.isActive}`);
    console.log(`   API Token: ${aggregator.apiToken?.substring(0, 8)}...`);
    console.log(`   Custom API Token: ${aggregator.customApiToken?.substring(0, 8)}...`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç —Å 2000ms –¥–æ 5000ms (5 —Å–µ–∫—É–Ω–¥)
    const newTimeout = 5000;
    
    const updatedAggregator = await db.aggregator.update({
      where: { id: aggregator.id },
      data: { maxSlaMs: newTimeout }
    });

    console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å ${aggregator.maxSlaMs}ms –¥–æ ${newTimeout}ms`);
    console.log(`   –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${updatedAggregator.name} - ${updatedAggregator.maxSlaMs}ms`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    const verifyAggregator = await db.aggregator.findUnique({
      where: { id: aggregator.id },
      select: { name: true, maxSlaMs: true, apiBaseUrl: true, isActive: true }
    });

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: ${verifyAggregator?.name} - ${verifyAggregator?.maxSlaMs}ms - ${verifyAggregator?.apiBaseUrl} - ${verifyAggregator?.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏...");
    const shortTimeoutAggregators = await db.aggregator.findMany({
      where: {
        maxSlaMs: { lte: 2000 },
        isActive: true
      },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true
      }
    });

    if (shortTimeoutAggregators.length > 0) {
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${shortTimeoutAggregators.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏:`);
      shortTimeoutAggregators.forEach(agg => {
        console.log(`   - ${agg.name}: ${agg.maxSlaMs}ms`);
      });
      
      console.log("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏...");
      for (const agg of shortTimeoutAggregators) {
        await db.aggregator.update({
          where: { id: agg.id },
          data: { maxSlaMs: 5000 }
        });
        console.log(`   ‚úÖ ${agg.name}: ${agg.maxSlaMs}ms ‚Üí 5000ms`);
      }
    } else {
      console.log("‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã");
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞:", error);
  } finally {
    await db.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixProductionAggregator();
