import { PrismaClient } from '@prisma/client';

const db = new PrismaClient();

async function checkMerchantAggregators() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä—á–∞–Ω—Ç–∞ 123...');
    
    // –ù–∞–π–¥–µ–º –º–µ—Ä—á–∞–Ω—Ç–∞ 123
    const merchant = await db.merchant.findFirst({
      where: { name: '123' },
      select: { id: true, name: true }
    });
    
    if (!merchant) {
      console.log('‚ùå –ú–µ—Ä—á–∞–Ω—Ç 123 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ú–µ—Ä—á–∞–Ω—Ç –Ω–∞–π–¥–µ–Ω:', merchant);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –º–µ—Ä—á–∞–Ω—Ç–∞
    const aggregators = await db.aggregatorMerchant.findMany({
      where: { 
        merchantId: merchant.id,
        isActive: true
      },
      include: {
        aggregator: {
          select: { id: true, name: true }
        }
      }
    });
    
    console.log('üìä –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –º–µ—Ä—á–∞–Ω—Ç–∞:', aggregators);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = await db.transaction.findMany({
      where: { merchantId: merchant.id },
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        id: true,
        amount: true,
        rate: true,
        aggregatorId: true,
        createdAt: true
      }
    });
    
    console.log('üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactions);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–æ–≤
    const rateSources = await db.rateSourceConfig.findMany({
      where: { isActive: true },
      select: { source: true, displayName: true, baseRate: true }
    });
    
    console.log('üìà –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–æ–≤:', rateSources);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await db.$disconnect();
  }
}

checkMerchantAggregators();
