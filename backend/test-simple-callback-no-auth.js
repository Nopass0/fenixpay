const axios = require('axios');

async function testSimpleCallbackNoAuth() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–ª–±—ç–∫ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const testCases = [
      {
        name: '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
        headers: { 'Content-Type': 'application/json' }
      },
      {
        name: '–° Authorization –∑–∞–≥–æ–ª–æ–≤–∫–æ–º',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test-token'
        }
      },
      {
        name: '–° x-aggregator-token –∑–∞–≥–æ–ª–æ–≤–∫–æ–º',
        headers: { 
          'Content-Type': 'application/json',
          'x-aggregator-token': 'test-token'
        }
      }
    ];
    
    for (const testCase of testCases) {
      try {
        console.log(`\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
        
        const response = await axios.post('http://localhost:3000/api/aggregator/callback', {
          id: "test-123",
          amount: 1000,
          status: "READY"
        }, {
          headers: testCase.headers,
          timeout: 5000
        });
        
        console.log(`‚úÖ –£—Å–ø–µ—Ö:`, response.status, response.data);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞:`, error.response?.status, error.response?.data || error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testSimpleCallbackNoAuth();

