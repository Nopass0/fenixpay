import { db } from "@/db";

async function debugTimeoutIssue() {
  try {
    console.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º...");
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å domainchsp.ru
    console.log("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å domainchsp.ru:");
    const domainChspAggregators = await db.aggregator.findMany({
      where: {
        OR: [
          { apiBaseUrl: { contains: "domainchsp.ru" } },
          { name: { contains: "domainchsp" } },
          { name: { contains: "chsp" } }
        ]
      },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true,
        isChaseCompatible: true,
        isChaseProject: true,
        apiToken: true,
        customApiToken: true,
        createdAt: true,
        updatedAt: true
      }
    });

    domainChspAggregators.forEach((agg, index) => {
      const apiKey = agg.customApiToken || agg.apiToken;
      const maskedKey = apiKey ? `${apiKey.substring(0, 8)}...` : 'N/A';
      console.log(`   ${index + 1}. ${agg.name}`);
      console.log(`      ID: ${agg.id}`);
      console.log(`      Email: ${agg.email}`);
      console.log(`      API URL: ${agg.apiBaseUrl}`);
      console.log(`      –¢–∞–π–º–∞—É—Ç: ${agg.maxSlaMs}ms`);
      console.log(`      –ê–∫—Ç–∏–≤–µ–Ω: ${agg.isActive}`);
      console.log(`      Chase Compatible: ${agg.isChaseCompatible}`);
      console.log(`      Chase Project: ${agg.isChaseProject}`);
      console.log(`      API Token: ${maskedKey}`);
      console.log(`      Custom API Token: ${agg.customApiToken ? `${agg.customApiToken.substring(0, 8)}...` : 'N/A'}`);
      console.log(`      –°–æ–∑–¥–∞–Ω: ${agg.createdAt}`);
      console.log(`      –û–±–Ω–æ–≤–ª–µ–Ω: ${agg.updatedAt}`);
      console.log("");
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
    console.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤:");
    const activeAggregators = await db.aggregator.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true,
        apiToken: true,
        customApiToken: true
      },
      orderBy: { maxSlaMs: 'asc' }
    });

    activeAggregators.forEach((agg, index) => {
      const apiKey = agg.customApiToken || agg.apiToken;
      const maskedKey = apiKey ? `${apiKey.substring(0, 8)}...` : 'N/A';
      console.log(`   ${index + 1}. ${agg.name} - ${agg.maxSlaMs}ms - ${maskedKey}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:");
    const defaultTimeout = 2000; // –ò–∑ —Å—Ö–µ–º—ã Prisma
    console.log(`   –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å—Ö–µ–º–µ: ${defaultTimeout}ms`);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    console.log("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏:");
    const shortTimeoutAggregators = await db.aggregator.findMany({
      where: {
        maxSlaMs: { lte: 2000 }
      },
      select: {
        id: true,
        name: true,
        email: true,
        apiBaseUrl: true,
        maxSlaMs: true,
        isActive: true,
        apiToken: true,
        customApiToken: true
      }
    });

    if (shortTimeoutAggregators.length > 0) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${shortTimeoutAggregators.length} –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏:`);
      shortTimeoutAggregators.forEach(agg => {
        const apiKey = agg.customApiToken || agg.apiToken;
        const maskedKey = apiKey ? `${apiKey.substring(0, 8)}...` : 'N/A';
        console.log(`   - ${agg.name}: ${agg.maxSlaMs}ms (${agg.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}) - ${maskedKey}`);
      });
    } else {
      console.log("   ‚úÖ –ù–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏");
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
    console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
    console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log(`   BASE_URL: ${process.env.BASE_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
    console.log(`   API_URL: ${process.env.API_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\n6Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    if (shortTimeoutAggregators.length > 0) {
      console.log("   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ - –æ–±–Ω–æ–≤–∏—Ç–µ –∏—Ö –¥–æ 5000ms");
    }
    
    const domainChspActive = domainChspAggregators.find(agg => agg.isActive);
    if (domainChspActive) {
      console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä domainchsp.ru –Ω–∞–π–¥–µ–Ω: ${domainChspActive.name} (${domainChspActive.maxSlaMs}ms)`);
      if (domainChspActive.maxSlaMs <= 2000) {
        console.log("   ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –æ–±–Ω–æ–≤–∏—Ç–µ –¥–æ 5000ms");
      }
    } else {
      console.log("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä domainchsp.ru –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:", error);
  } finally {
    await db.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
debugTimeoutIssue();
