import axios from 'axios';

async function testErrorSerialization() {
  try {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫...");
    
    const testRequest = {
      rate: 81,
      amount: 5014,
      userIp: "127.0.0.1",
      orderId: `ERROR_TEST_${Date.now()}`,
      methodId: "cmed74minz06uoc01cjqllr6p",
      expired_at: new Date(Date.now() + 30 * 60 * 1000).toISOString(),
      callbackUri: "https://chasepay.pro/api/aggregator/callback",
      clientIdentifier: "client_user_12345"
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
    console.log(JSON.stringify(testRequest, null, 2));

    const startTime = Date.now();
    
    const response = await axios.post('https://domainchsp.ru/api/merchant/transactions/in', testRequest, {
      headers: {
        'Content-Type': 'application/json',
        'x-merchant-api-key': '64f8c5b37107d437f778b6037cf4a002d068edd7197108efcd5c53961211bfd0'
      },
      timeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
      validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
    });

    const responseTime = Date.now() - startTime;

    console.log("");
    console.log("üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:");
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
    console.log(`   –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(response.data, null, 2));

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log("\nüìä –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:");
    console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   –£—Å–ø–µ—Ö: ${response.data?.success}`);
    console.log(`   –û—à–∏–±–∫–∞: ${response.data?.error}`);
    console.log(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${typeof response.data?.error}`);
    
    if (response.data?.error === "[object Object]") {
      console.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê: –í—Å–µ –µ—â–µ –ø–æ–ª—É—á–∞–µ–º '[object Object]'");
    } else if (typeof response.data?.error === 'string' && response.data?.error.length > 0) {
      console.log("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞");
    } else if (typeof response.data?.error === 'object') {
      console.log("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—Å–µ –µ—â–µ –æ–±—ä–µ–∫—Ç, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
    } else {
      console.log("‚ÑπÔ∏è  –û—à–∏–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —Å –æ—à–∏–±–∫–∞–º–∏
    if (response.data?.message) {
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${response.data.message}`);
    }
    if (response.data?.details) {
      console.log(`   –î–µ—Ç–∞–ª–∏: ${response.data.details}`);
    }

  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
    
    if (error.code === 'ECONNABORTED') {
      console.log("‚è∞ –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç");
    } else if (error.response) {
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${error.response.status}`);
      console.log("üìÑ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", JSON.stringify(error.response.data, null, 2));
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testErrorSerialization();
